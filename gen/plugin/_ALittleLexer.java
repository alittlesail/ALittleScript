/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package plugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static plugin.psi.ALittleTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_ALittleLexer.flex</tt>
 */
public class _ALittleLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\4\2\22\0\1\3\1\30\1\13\2\0\1\36\1\34\1\40\1\22\1\23\1\5\1\31\1\26"+
    "\1\32\1\12\1\4\1\6\3\11\1\71\1\11\1\70\3\11\1\24\1\25\1\35\1\27\1\37\2\0\6"+
    "\10\2\15\1\67\21\15\1\20\1\14\1\21\1\0\1\15\1\0\1\55\1\51\1\53\1\57\1\42\1"+
    "\64\1\43\1\65\1\44\1\15\1\66\1\52\1\63\1\61\1\56\1\47\1\15\1\41\1\45\1\46"+
    "\1\50\1\54\1\62\1\7\1\60\1\15\1\16\1\33\1\17\7\0\1\1\242\0\2\1\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\5"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\2\1\1\27\1\30\1\31\1\32\20\6\1\33\1\0"+
    "\1\34\1\35\1\0\1\5\1\36\1\0\1\37\1\0"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\4\6\1\53\1\54\17\6\1\55"+
    "\11\6\1\0\1\5\5\6\1\56\1\57\1\60\16\6"+
    "\1\61\3\6\1\62\3\6\1\63\1\6\1\64\1\65"+
    "\1\33\3\6\1\66\1\67\3\6\1\70\1\71\4\6"+
    "\1\72\1\73\1\6\1\74\1\6\1\75\3\6\1\76"+
    "\15\6\1\77\1\100\1\101\1\102\1\6\1\103\1\6"+
    "\1\104\1\105\1\6\1\106\1\6\1\107\1\110\1\111"+
    "\1\112\2\6\1\113\1\114\2\6\1\115\1\116\2\6"+
    "\1\117\2\6\1\120\1\121";

  private static int [] zzUnpackAction() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\u01d0\0\u020a\0\72\0\72\0\72\0\72\0\72\0\72"+
    "\0\72\0\72\0\72\0\72\0\u0244\0\u027e\0\u02b8\0\u02f2"+
    "\0\u032c\0\u0366\0\u03a0\0\u03da\0\u0414\0\72\0\u044e\0\u0488"+
    "\0\u04c2\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658"+
    "\0\u0692\0\u06cc\0\u0706\0\u0740\0\u077a\0\u07b4\0\u07ee\0\u0828"+
    "\0\72\0\72\0\u0862\0\u089c\0\72\0\u020a\0\72\0\u08d6"+
    "\0\72\0\72\0\72\0\72\0\72\0\72\0\72\0\72"+
    "\0\72\0\72\0\72\0\u0910\0\u094a\0\u0984\0\u09be\0\u09f8"+
    "\0\u015c\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e"+
    "\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e"+
    "\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e"+
    "\0\u0f68\0\u0fa2\0\u0fdc\0\u0862\0\u1016\0\u1050\0\u108a\0\u10c4"+
    "\0\u10fe\0\u015c\0\u015c\0\u015c\0\u1138\0\u1172\0\u11ac\0\u11e6"+
    "\0\u1220\0\u125a\0\u1294\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6"+
    "\0\u13f0\0\u142a\0\u015c\0\u1464\0\u149e\0\u14d8\0\u015c\0\u1512"+
    "\0\u154c\0\u1586\0\u015c\0\u15c0\0\u015c\0\u015c\0\u0828\0\u15fa"+
    "\0\u1634\0\u166e\0\u16a8\0\u015c\0\u16e2\0\u171c\0\u1756\0\u015c"+
    "\0\u015c\0\u1790\0\u17ca\0\u1804\0\u183e\0\u015c\0\u015c\0\u1878"+
    "\0\u015c\0\u18b2\0\u015c\0\u18ec\0\u1926\0\u1960\0\u015c\0\u199a"+
    "\0\u19d4\0\u1a0e\0\u1a48\0\u1a82\0\u1abc\0\u1af6\0\u1b30\0\u1b6a"+
    "\0\u1ba4\0\u1bde\0\u1c18\0\u1c52\0\u015c\0\u015c\0\u015c\0\u015c"+
    "\0\u1c8c\0\u015c\0\u1cc6\0\u015c\0\u015c\0\u1d00\0\u015c\0\u1d3a"+
    "\0\u015c\0\u015c\0\u015c\0\u015c\0\u1d74\0\u1dae\0\u015c\0\u015c"+
    "\0\u1de8\0\u1e22\0\u015c\0\u015c\0\u1e5c\0\u1e96\0\u015c\0\u1ed0"+
    "\0\u1f0a\0\u015c\0\u015c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\2\3\1\4\1\5\1\6\2\7\1\10\1\11"+
    "\1\12\1\13\1\7\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\7\1\46\1\7"+
    "\1\47\1\7\1\50\1\7\1\51\1\52\1\53\1\54"+
    "\1\7\1\55\2\7\1\56\2\10\74\0\2\3\72\0"+
    "\1\57\1\60\21\0\1\61\71\0\1\62\50\0\1\10"+
    "\1\63\1\0\1\10\1\64\55\0\2\10\6\0\4\7"+
    "\3\0\1\7\23\0\31\7\6\0\1\10\2\0\1\10"+
    "\1\64\55\0\2\10\12\0\1\65\57\0\13\66\1\67"+
    "\1\70\55\66\27\0\1\71\71\0\1\72\71\0\1\73"+
    "\1\0\1\74\67\0\1\75\2\0\1\76\72\0\1\77"+
    "\72\0\1\100\64\0\1\101\71\0\1\102\71\0\1\103"+
    "\50\0\4\7\3\0\1\7\23\0\1\7\1\104\27\7"+
    "\6\0\4\7\3\0\1\7\23\0\11\7\1\105\6\7"+
    "\1\106\10\7\6\0\4\7\3\0\1\7\23\0\1\7"+
    "\1\107\27\7\6\0\4\7\3\0\1\7\23\0\20\7"+
    "\1\110\2\7\1\111\5\7\6\0\4\7\3\0\1\7"+
    "\23\0\1\7\1\112\3\7\1\113\23\7\6\0\4\7"+
    "\3\0\1\7\23\0\1\114\23\7\1\115\4\7\6\0"+
    "\4\7\3\0\1\7\23\0\1\116\6\7\1\117\21\7"+
    "\6\0\4\7\3\0\1\7\23\0\1\120\2\7\1\121"+
    "\11\7\1\122\13\7\6\0\4\7\3\0\1\7\23\0"+
    "\11\7\1\123\2\7\1\124\14\7\6\0\4\7\3\0"+
    "\1\7\23\0\4\7\1\125\2\7\1\126\10\7\1\127"+
    "\1\130\7\7\6\0\4\7\3\0\1\7\23\0\15\7"+
    "\1\131\13\7\6\0\4\7\3\0\1\7\23\0\3\7"+
    "\1\132\25\7\6\0\4\7\3\0\1\7\23\0\1\7"+
    "\1\133\5\7\1\134\4\7\1\135\14\7\6\0\4\7"+
    "\3\0\1\7\23\0\24\7\1\136\4\7\6\0\4\7"+
    "\3\0\1\7\23\0\7\7\1\137\4\7\1\140\1\141"+
    "\13\7\6\0\4\7\3\0\1\7\23\0\27\7\1\142"+
    "\1\7\1\57\2\0\67\57\1\60\2\0\2\60\1\143"+
    "\64\60\6\0\1\144\1\0\2\144\30\0\1\144\6\0"+
    "\1\144\1\0\1\144\1\0\1\144\1\0\1\144\4\0"+
    "\1\144\3\0\2\144\6\0\1\64\2\0\1\64\56\0"+
    "\2\64\1\66\2\0\67\66\6\0\4\7\3\0\1\7"+
    "\23\0\2\7\1\145\2\7\1\146\15\7\1\147\5\7"+
    "\6\0\4\7\3\0\1\7\23\0\4\7\1\150\24\7"+
    "\6\0\4\7\3\0\1\7\23\0\7\7\1\151\21\7"+
    "\6\0\4\7\3\0\1\7\23\0\5\7\1\152\23\7"+
    "\6\0\4\7\3\0\1\7\23\0\5\7\1\153\23\7"+
    "\6\0\4\7\3\0\1\7\23\0\5\7\1\154\23\7"+
    "\6\0\4\7\3\0\1\7\23\0\1\155\13\7\1\156"+
    "\14\7\6\0\4\7\3\0\1\7\23\0\7\7\1\157"+
    "\21\7\6\0\4\7\3\0\1\7\23\0\3\7\1\160"+
    "\25\7\6\0\4\7\3\0\1\7\23\0\3\7\1\161"+
    "\11\7\1\162\13\7\6\0\4\7\3\0\1\7\23\0"+
    "\10\7\1\163\20\7\6\0\4\7\3\0\1\7\23\0"+
    "\1\7\1\164\27\7\6\0\4\7\3\0\1\7\23\0"+
    "\20\7\1\165\10\7\6\0\4\7\3\0\1\7\23\0"+
    "\15\7\1\166\13\7\6\0\4\7\3\0\1\7\23\0"+
    "\14\7\1\167\14\7\6\0\4\7\3\0\1\7\23\0"+
    "\4\7\1\170\24\7\6\0\4\7\3\0\1\7\23\0"+
    "\17\7\1\171\11\7\6\0\4\7\3\0\1\7\23\0"+
    "\5\7\1\172\23\7\6\0\4\7\3\0\1\7\23\0"+
    "\17\7\1\173\11\7\6\0\4\7\3\0\1\7\23\0"+
    "\14\7\1\174\14\7\6\0\4\7\3\0\1\7\23\0"+
    "\7\7\1\175\21\7\6\0\4\7\3\0\1\7\23\0"+
    "\1\7\1\176\27\7\6\0\4\7\3\0\1\7\23\0"+
    "\21\7\1\177\7\7\6\0\4\7\3\0\1\7\23\0"+
    "\11\7\1\200\17\7\6\0\4\7\3\0\1\7\23\0"+
    "\22\7\1\201\6\7\6\0\4\7\3\0\1\7\23\0"+
    "\3\7\1\202\25\7\6\0\4\7\3\0\1\7\23\0"+
    "\20\7\1\203\10\7\6\0\4\7\3\0\1\7\23\0"+
    "\11\7\1\204\17\7\6\0\4\7\3\0\1\7\23\0"+
    "\1\205\30\7\6\0\4\7\3\0\1\7\23\0\30\7"+
    "\1\206\1\60\2\0\1\60\1\207\1\143\64\60\6\0"+
    "\4\7\3\0\1\7\23\0\3\7\1\210\25\7\6\0"+
    "\4\7\3\0\1\7\23\0\7\7\1\211\21\7\6\0"+
    "\4\7\3\0\1\7\23\0\11\7\1\212\17\7\6\0"+
    "\4\7\3\0\1\7\23\0\1\7\1\213\27\7\6\0"+
    "\4\7\3\0\1\7\23\0\22\7\1\214\6\7\6\0"+
    "\4\7\3\0\1\7\23\0\3\7\1\215\3\7\1\216"+
    "\21\7\6\0\4\7\3\0\1\7\23\0\5\7\1\217"+
    "\23\7\6\0\4\7\3\0\1\7\23\0\1\7\1\220"+
    "\27\7\6\0\4\7\3\0\1\7\23\0\4\7\1\221"+
    "\24\7\6\0\4\7\3\0\1\7\23\0\13\7\1\222"+
    "\15\7\6\0\4\7\3\0\1\7\23\0\5\7\1\223"+
    "\23\7\6\0\4\7\3\0\1\7\23\0\11\7\1\224"+
    "\17\7\6\0\4\7\3\0\1\7\23\0\14\7\1\225"+
    "\14\7\6\0\4\7\3\0\1\7\23\0\16\7\1\226"+
    "\12\7\6\0\4\7\3\0\1\7\23\0\11\7\1\227"+
    "\17\7\6\0\4\7\3\0\1\7\23\0\4\7\1\230"+
    "\24\7\6\0\4\7\3\0\1\7\23\0\5\7\1\231"+
    "\23\7\6\0\4\7\3\0\1\7\23\0\20\7\1\232"+
    "\10\7\6\0\4\7\3\0\1\7\23\0\15\7\1\233"+
    "\13\7\6\0\4\7\3\0\1\7\23\0\3\7\1\234"+
    "\25\7\6\0\4\7\3\0\1\7\23\0\10\7\1\235"+
    "\20\7\6\0\4\7\3\0\1\7\23\0\11\7\1\236"+
    "\17\7\6\0\4\7\3\0\1\7\23\0\11\7\1\237"+
    "\17\7\6\0\4\7\3\0\1\7\23\0\1\7\1\240"+
    "\27\7\6\0\4\7\3\0\1\7\23\0\11\7\1\241"+
    "\17\7\6\0\4\7\3\0\1\7\23\0\4\7\1\242"+
    "\24\7\6\0\4\7\3\0\1\7\23\0\4\7\1\243"+
    "\24\7\6\0\4\7\3\0\1\7\23\0\1\244\30\7"+
    "\6\0\4\7\3\0\1\7\23\0\1\7\1\245\27\7"+
    "\6\0\4\7\3\0\1\7\23\0\3\7\1\246\25\7"+
    "\6\0\4\7\3\0\1\7\23\0\20\7\1\247\10\7"+
    "\6\0\4\7\3\0\1\7\23\0\12\7\1\250\16\7"+
    "\6\0\4\7\3\0\1\7\23\0\3\7\1\251\25\7"+
    "\6\0\4\7\3\0\1\7\23\0\14\7\1\252\14\7"+
    "\6\0\4\7\3\0\1\7\23\0\1\7\1\253\27\7"+
    "\6\0\4\7\3\0\1\7\23\0\3\7\1\254\25\7"+
    "\6\0\4\7\3\0\1\7\23\0\25\7\1\255\3\7"+
    "\6\0\4\7\3\0\1\7\23\0\4\7\1\256\24\7"+
    "\6\0\4\7\3\0\1\7\23\0\12\7\1\257\16\7"+
    "\6\0\4\7\3\0\1\7\23\0\5\7\1\260\23\7"+
    "\6\0\4\7\3\0\1\7\23\0\11\7\1\261\17\7"+
    "\6\0\4\7\3\0\1\7\23\0\16\7\1\262\12\7"+
    "\6\0\4\7\3\0\1\7\23\0\4\7\1\263\24\7"+
    "\6\0\4\7\3\0\1\7\23\0\1\7\1\264\27\7"+
    "\6\0\4\7\3\0\1\7\23\0\1\7\1\265\27\7"+
    "\6\0\4\7\3\0\1\7\23\0\5\7\1\266\23\7"+
    "\6\0\4\7\3\0\1\7\23\0\20\7\1\267\10\7"+
    "\6\0\4\7\3\0\1\7\23\0\12\7\1\270\16\7"+
    "\6\0\4\7\3\0\1\7\23\0\23\7\1\271\5\7"+
    "\6\0\4\7\3\0\1\7\23\0\2\7\1\272\26\7"+
    "\6\0\4\7\3\0\1\7\23\0\5\7\1\273\23\7"+
    "\6\0\4\7\3\0\1\7\23\0\12\7\1\274\16\7"+
    "\6\0\4\7\3\0\1\7\23\0\5\7\1\275\23\7"+
    "\6\0\4\7\3\0\1\7\23\0\12\7\1\276\16\7"+
    "\6\0\4\7\3\0\1\7\23\0\12\7\1\277\16\7"+
    "\6\0\4\7\3\0\1\7\23\0\1\7\1\300\27\7"+
    "\6\0\4\7\3\0\1\7\23\0\6\7\1\301\22\7"+
    "\6\0\4\7\3\0\1\7\23\0\1\7\1\302\27\7"+
    "\6\0\4\7\3\0\1\7\23\0\5\7\1\303\23\7"+
    "\6\0\4\7\3\0\1\7\23\0\1\7\1\304\27\7"+
    "\6\0\4\7\3\0\1\7\23\0\5\7\1\305\23\7"+
    "\6\0\4\7\3\0\1\7\23\0\14\7\1\306\14\7"+
    "\6\0\4\7\3\0\1\7\23\0\1\307\30\7\6\0"+
    "\4\7\3\0\1\7\23\0\1\7\1\310\27\7\6\0"+
    "\4\7\3\0\1\7\23\0\12\7\1\311\16\7\6\0"+
    "\4\7\3\0\1\7\23\0\16\7\1\312\12\7\6\0"+
    "\4\7\3\0\1\7\23\0\1\7\1\313\27\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8004];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\10\1\12\11\11\1\1\11\21\1\1\0"+
    "\2\11\1\0\1\1\1\11\1\0\1\11\1\0\13\11"+
    "\37\1\1\0\150\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _ALittleLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _ALittleLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 82: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 83: break;
          case 3: 
            { return QUOTIENT;
            } 
            // fall through
          case 84: break;
          case 4: 
            { return MUL;
            } 
            // fall through
          case 85: break;
          case 5: 
            { return DIGIT_CONTENT;
            } 
            // fall through
          case 86: break;
          case 6: 
            { return ID_CONTENT;
            } 
            // fall through
          case 87: break;
          case 7: 
            { return DOT;
            } 
            // fall through
          case 88: break;
          case 8: 
            { return QUOTE;
            } 
            // fall through
          case 89: break;
          case 9: 
            { return BACK;
            } 
            // fall through
          case 90: break;
          case 10: 
            { return LBRACE;
            } 
            // fall through
          case 91: break;
          case 11: 
            { return RBRACE;
            } 
            // fall through
          case 92: break;
          case 12: 
            { return LBRACK;
            } 
            // fall through
          case 93: break;
          case 13: 
            { return RBRACK;
            } 
            // fall through
          case 94: break;
          case 14: 
            { return LPAREN;
            } 
            // fall through
          case 95: break;
          case 15: 
            { return RPAREN;
            } 
            // fall through
          case 96: break;
          case 16: 
            { return COLON;
            } 
            // fall through
          case 97: break;
          case 17: 
            { return SEMI;
            } 
            // fall through
          case 98: break;
          case 18: 
            { return COMMA;
            } 
            // fall through
          case 99: break;
          case 19: 
            { return ASSIGN;
            } 
            // fall through
          case 100: break;
          case 20: 
            { return NOT;
            } 
            // fall through
          case 101: break;
          case 21: 
            { return PLUS;
            } 
            // fall through
          case 102: break;
          case 22: 
            { return MINUS;
            } 
            // fall through
          case 103: break;
          case 23: 
            { return LESS;
            } 
            // fall through
          case 104: break;
          case 24: 
            { return REMAINDER;
            } 
            // fall through
          case 105: break;
          case 25: 
            { return GREATER;
            } 
            // fall through
          case 106: break;
          case 26: 
            { return APOS;
            } 
            // fall through
          case 107: break;
          case 27: 
            { return COMMENT;
            } 
            // fall through
          case 108: break;
          case 28: 
            { return QUOTIENT_ASSIGN;
            } 
            // fall through
          case 109: break;
          case 29: 
            { return MUL_ASSIGN;
            } 
            // fall through
          case 110: break;
          case 30: 
            { return CONCAT;
            } 
            // fall through
          case 111: break;
          case 31: 
            { return STRING_CONTENT;
            } 
            // fall through
          case 112: break;
          case 32: 
            { return EQ;
            } 
            // fall through
          case 113: break;
          case 33: 
            { return NOT_EQ;
            } 
            // fall through
          case 114: break;
          case 34: 
            { return PLUS_ASSIGN;
            } 
            // fall through
          case 115: break;
          case 35: 
            { return PLUS_PLUS;
            } 
            // fall through
          case 116: break;
          case 36: 
            { return MINUS_ASSIGN;
            } 
            // fall through
          case 117: break;
          case 37: 
            { return MINUS_MINUS;
            } 
            // fall through
          case 118: break;
          case 38: 
            { return COND_OR;
            } 
            // fall through
          case 119: break;
          case 39: 
            { return COND_AND;
            } 
            // fall through
          case 120: break;
          case 40: 
            { return LESS_OR_EQUAL;
            } 
            // fall through
          case 121: break;
          case 41: 
            { return REMAINDER_ASSIGN;
            } 
            // fall through
          case 122: break;
          case 42: 
            { return GREATER_OR_EQUAL;
            } 
            // fall through
          case 123: break;
          case 43: 
            { return IN;
            } 
            // fall through
          case 124: break;
          case 44: 
            { return IF;
            } 
            // fall through
          case 125: break;
          case 45: 
            { return DO;
            } 
            // fall through
          case 126: break;
          case 46: 
            { return GET;
            } 
            // fall through
          case 127: break;
          case 47: 
            { return INT;
            } 
            // fall through
          case 128: break;
          case 48: 
            { return SET;
            } 
            // fall through
          case 129: break;
          case 49: 
            { return ANY;
            } 
            // fall through
          case 130: break;
          case 50: 
            { return NEW;
            } 
            // fall through
          case 131: break;
          case 51: 
            { return FUN;
            } 
            // fall through
          case 132: break;
          case 52: 
            { return FOR;
            } 
            // fall through
          case 133: break;
          case 53: 
            { return I64;
            } 
            // fall through
          case 134: break;
          case 54: 
            { return ELSE;
            } 
            // fall through
          case 135: break;
          case 55: 
            { return ENUM;
            } 
            // fall through
          case 136: break;
          case 56: 
            { return TRUE;
            } 
            // fall through
          case 137: break;
          case 57: 
            { return THIS;
            } 
            // fall through
          case 138: break;
          case 58: 
            { return BIND;
            } 
            // fall through
          case 139: break;
          case 59: 
            { return BOOL;
            } 
            // fall through
          case 140: break;
          case 60: 
            { return CAST;
            } 
            // fall through
          case 141: break;
          case 61: 
            { return AUTO;
            } 
            // fall through
          case 142: break;
          case 62: 
            { return NULL;
            } 
            // fall through
          case 143: break;
          case 63: 
            { return BREAK;
            } 
            // fall through
          case 144: break;
          case 64: 
            { return CLASS;
            } 
            // fall through
          case 145: break;
          case 65: 
            { return ASYNC;
            } 
            // fall through
          case 146: break;
          case 66: 
            { return AWAIT;
            } 
            // fall through
          case 147: break;
          case 67: 
            { return YIELD;
            } 
            // fall through
          case 148: break;
          case 68: 
            { return WHILE;
            } 
            // fall through
          case 149: break;
          case 69: 
            { return FALSE;
            } 
            // fall through
          case 150: break;
          case 70: 
            { return RETURN;
            } 
            // fall through
          case 151: break;
          case 71: 
            { return ELSEIF;
            } 
            // fall through
          case 152: break;
          case 72: 
            { return STRING;
            } 
            // fall through
          case 153: break;
          case 73: 
            { return STRUCT;
            } 
            // fall through
          case 154: break;
          case 74: 
            { return STATIC;
            } 
            // fall through
          case 155: break;
          case 75: 
            { return PUBLIC;
            } 
            // fall through
          case 156: break;
          case 76: 
            { return DOUBLE;
            } 
            // fall through
          case 157: break;
          case 77: 
            { return REFLECT;
            } 
            // fall through
          case 158: break;
          case 78: 
            { return PRIVATE;
            } 
            // fall through
          case 159: break;
          case 79: 
            { return REGISTER;
            } 
            // fall through
          case 160: break;
          case 80: 
            { return PROTECTED;
            } 
            // fall through
          case 161: break;
          case 81: 
            { return NAMESPACE;
            } 
            // fall through
          case 162: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
