/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package plugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static plugin.psi.ALittleTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_ALittleLexer.flex</tt>
 */
public class _ALittleLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\4\2\22\0\1\3\1\30\1\14\2\0\1\41\1\34\1\12\1\22\1\23\1\40\1\31\1"+
    "\26\1\32\1\11\1\4\1\5\3\10\1\76\1\10\1\75\3\10\1\24\1\25\1\36\1\27\1\42\2"+
    "\0\2\7\1\60\2\7\1\73\2\15\1\74\2\15\1\72\1\71\15\15\1\20\1\13\1\21\1\37\1"+
    "\15\1\0\1\44\1\64\1\51\1\66\1\46\1\62\1\53\1\67\1\54\1\15\1\70\1\57\1\45\1"+
    "\43\1\61\1\50\1\15\1\52\1\47\1\55\1\63\1\65\1\56\1\6\1\77\1\15\1\16\1\33\1"+
    "\17\1\35\6\0\1\1\242\0\2\1\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\4\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\23\5\1\37\1\40\1\0\1\4\1\41\1\0\1\42"+
    "\3\0\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\15\5\1\64\1\65\11\5\1\66\4\5"+
    "\1\4\1\67\1\70\1\5\1\71\1\5\1\72\2\5"+
    "\1\73\10\5\1\74\1\5\1\75\5\5\1\76\1\77"+
    "\3\5\1\100\2\5\1\101\1\5\1\102\1\103\1\104"+
    "\12\5\1\105\1\106\1\5\1\107\2\5\1\110\1\5"+
    "\1\111\10\5\1\112\1\5\1\113\3\5\1\114\1\115"+
    "\1\116\3\5\1\117\1\120\1\121\1\122\2\5\1\123"+
    "\1\5\1\124\1\5\1\125\2\5\1\126\3\5\1\127"+
    "\2\5\1\130\1\131\1\132\1\133";

  private static int [] zzUnpackAction() {
    int [] result = new int[209];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180\0\u01c0"+
    "\0\u0200\0\100\0\u0240\0\100\0\100\0\100\0\100\0\100"+
    "\0\100\0\100\0\100\0\100\0\u0280\0\u02c0\0\u0300\0\u0340"+
    "\0\u0380\0\u03c0\0\100\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500"+
    "\0\u0540\0\u0580\0\u05c0\0\u0600\0\u0640\0\u0680\0\u06c0\0\u0700"+
    "\0\u0740\0\u0780\0\u07c0\0\u0800\0\u0840\0\u0880\0\u08c0\0\u0900"+
    "\0\u0940\0\u0980\0\u09c0\0\u0a00\0\100\0\u0a40\0\u0a80\0\100"+
    "\0\u0200\0\100\0\u0ac0\0\u0240\0\u0b00\0\100\0\100\0\100"+
    "\0\100\0\100\0\100\0\100\0\100\0\100\0\100\0\100"+
    "\0\u0b40\0\100\0\100\0\100\0\100\0\u0b80\0\u0bc0\0\u0c00"+
    "\0\u0c40\0\u0c80\0\u0cc0\0\u0d00\0\u0d40\0\u0d80\0\u0dc0\0\u0e00"+
    "\0\u0e40\0\u0e80\0\u0ec0\0\u0f00\0\u0140\0\u0f40\0\u0f80\0\u0fc0"+
    "\0\u1000\0\u1040\0\u1080\0\u10c0\0\u1100\0\u1140\0\u1180\0\u11c0"+
    "\0\u1200\0\u1240\0\u1280\0\u0a40\0\100\0\100\0\u12c0\0\u0140"+
    "\0\u1300\0\u0140\0\u1340\0\u1380\0\u0140\0\u13c0\0\u1400\0\u1440"+
    "\0\u1480\0\u14c0\0\u1500\0\u1540\0\u1580\0\u0140\0\u15c0\0\u0140"+
    "\0\u1600\0\u1640\0\u1680\0\u16c0\0\u1700\0\u0140\0\u0140\0\u1740"+
    "\0\u1780\0\u17c0\0\u0140\0\u1800\0\u1840\0\u0140\0\u1880\0\u0140"+
    "\0\u0140\0\u18c0\0\u1900\0\u1940\0\u1980\0\u19c0\0\u1a00\0\u1a40"+
    "\0\u1a80\0\u1ac0\0\u1b00\0\u1b40\0\u0140\0\u0140\0\u1b80\0\u0140"+
    "\0\u1bc0\0\u1c00\0\u0140\0\u1c40\0\u0140\0\u1c80\0\u1cc0\0\u1d00"+
    "\0\u1d40\0\u1d80\0\u1dc0\0\u1e00\0\u1e40\0\u0140\0\u1e80\0\u0140"+
    "\0\u1ec0\0\u1f00\0\u1f40\0\u0140\0\u0140\0\u0140\0\u1f80\0\u1fc0"+
    "\0\u2000\0\u0140\0\u0140\0\u0140\0\u0140\0\u2040\0\u2080\0\u0140"+
    "\0\u20c0\0\u0140\0\u2100\0\u0140\0\u2140\0\u2180\0\u0140\0\u21c0"+
    "\0\u2200\0\u2240\0\u0140\0\u2280\0\u22c0\0\u0140\0\u0140\0\u0140"+
    "\0\u0140";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[209];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\2\3\1\4\1\5\2\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\6\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\6\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\6\1\54\1\6\1\55"+
    "\1\6\1\56\1\6\1\57\2\6\1\60\1\61\1\62"+
    "\1\63\2\7\1\6\102\0\2\3\100\0\1\64\22\0"+
    "\1\65\55\0\1\7\1\66\1\0\1\7\1\67\63\0"+
    "\2\7\6\0\4\6\4\0\1\6\25\0\35\6\5\0"+
    "\1\7\2\0\1\7\1\67\63\0\2\7\12\0\1\70"+
    "\66\0\12\71\1\72\1\73\64\71\13\74\1\75\1\72"+
    "\63\74\27\0\1\76\77\0\1\77\77\0\1\100\1\0"+
    "\1\101\75\0\1\102\2\0\1\103\74\0\1\104\3\0"+
    "\1\105\73\0\1\106\4\0\1\107\72\0\1\110\6\0"+
    "\1\111\70\0\1\112\77\0\1\113\77\0\1\114\77\0"+
    "\1\115\12\0\1\116\42\0\4\6\4\0\1\6\25\0"+
    "\1\6\1\117\1\6\1\120\14\6\1\121\14\6\5\0"+
    "\4\6\4\0\1\6\25\0\1\122\34\6\5\0\4\6"+
    "\4\0\1\6\25\0\1\123\13\6\1\124\20\6\5\0"+
    "\4\6\4\0\1\6\25\0\3\6\1\125\6\6\1\126"+
    "\22\6\5\0\4\6\4\0\1\6\25\0\7\6\1\127"+
    "\10\6\1\130\14\6\5\0\4\6\4\0\1\6\25\0"+
    "\14\6\1\131\20\6\5\0\4\6\4\0\1\6\25\0"+
    "\3\6\1\132\31\6\5\0\4\6\4\0\1\6\25\0"+
    "\3\6\1\133\31\6\5\0\4\6\4\0\1\6\25\0"+
    "\1\134\16\6\1\135\15\6\5\0\4\6\4\0\1\6"+
    "\25\0\7\6\1\136\14\6\1\137\10\6\5\0\4\6"+
    "\4\0\1\6\25\0\24\6\1\140\10\6\5\0\4\6"+
    "\4\0\1\6\25\0\12\6\1\141\22\6\5\0\4\6"+
    "\4\0\1\6\25\0\1\6\1\142\14\6\1\143\1\6"+
    "\1\144\14\6\5\0\4\6\4\0\1\6\25\0\7\6"+
    "\1\145\6\6\1\146\16\6\5\0\4\6\4\0\1\6"+
    "\25\0\16\6\1\147\16\6\5\0\4\6\4\0\1\6"+
    "\25\0\1\6\1\150\33\6\5\0\4\6\4\0\1\6"+
    "\25\0\11\6\1\151\23\6\5\0\4\6\4\0\1\6"+
    "\25\0\20\6\1\152\14\6\5\0\4\6\4\0\1\6"+
    "\25\0\32\6\1\153\2\6\1\64\2\0\75\64\5\0"+
    "\1\154\1\0\2\154\33\0\1\154\1\0\1\154\2\0"+
    "\1\154\6\0\1\154\1\0\1\154\1\0\1\154\1\0"+
    "\1\154\4\0\1\154\1\0\2\154\6\0\1\67\2\0"+
    "\1\67\64\0\2\67\1\0\1\71\2\0\75\71\1\74"+
    "\2\0\75\74\27\0\1\155\77\0\1\156\55\0\4\6"+
    "\4\0\1\6\25\0\2\6\1\157\32\6\5\0\4\6"+
    "\4\0\1\6\25\0\13\6\1\160\21\6\5\0\4\6"+
    "\4\0\1\6\25\0\14\6\1\161\20\6\5\0\4\6"+
    "\4\0\1\6\25\0\34\6\1\162\5\0\4\6\4\0"+
    "\1\6\25\0\20\6\1\163\14\6\5\0\4\6\4\0"+
    "\1\6\25\0\4\6\1\164\30\6\5\0\4\6\4\0"+
    "\1\6\25\0\12\6\1\165\22\6\5\0\4\6\4\0"+
    "\1\6\25\0\1\6\1\166\5\6\1\167\25\6\5\0"+
    "\4\6\4\0\1\6\25\0\11\6\1\170\4\6\1\171"+
    "\16\6\5\0\4\6\4\0\1\6\25\0\21\6\1\172"+
    "\13\6\5\0\4\6\4\0\1\6\25\0\1\6\1\173"+
    "\33\6\5\0\4\6\4\0\1\6\25\0\10\6\1\174"+
    "\1\6\1\175\22\6\5\0\4\6\4\0\1\6\25\0"+
    "\12\6\1\176\22\6\5\0\4\6\4\0\1\6\25\0"+
    "\4\6\1\177\5\6\1\200\22\6\5\0\4\6\4\0"+
    "\1\6\25\0\20\6\1\201\14\6\5\0\4\6\4\0"+
    "\1\6\25\0\11\6\1\202\23\6\5\0\4\6\4\0"+
    "\1\6\25\0\11\6\1\203\23\6\5\0\4\6\4\0"+
    "\1\6\25\0\16\6\1\204\16\6\5\0\4\6\4\0"+
    "\1\6\25\0\14\6\1\205\20\6\5\0\4\6\4\0"+
    "\1\6\25\0\7\6\1\206\25\6\5\0\4\6\4\0"+
    "\1\6\25\0\1\207\34\6\5\0\4\6\4\0\1\6"+
    "\25\0\3\6\1\210\31\6\5\0\4\6\4\0\1\6"+
    "\25\0\16\6\1\211\16\6\5\0\4\6\4\0\1\6"+
    "\25\0\20\6\1\212\14\6\5\0\4\6\4\0\1\6"+
    "\25\0\5\6\1\213\27\6\5\0\4\6\4\0\1\6"+
    "\25\0\4\6\1\214\30\6\5\0\4\6\4\0\1\6"+
    "\25\0\1\215\34\6\5\0\4\6\4\0\1\6\25\0"+
    "\33\6\1\216\1\6\5\0\4\6\4\0\1\6\25\0"+
    "\3\6\1\217\31\6\5\0\4\6\4\0\1\6\25\0"+
    "\14\6\1\220\20\6\5\0\4\6\4\0\1\6\25\0"+
    "\2\6\1\221\32\6\5\0\4\6\4\0\1\6\25\0"+
    "\3\6\1\222\31\6\5\0\4\6\4\0\1\6\25\0"+
    "\12\6\1\223\22\6\5\0\4\6\4\0\1\6\25\0"+
    "\11\6\1\224\6\6\1\225\14\6\5\0\4\6\4\0"+
    "\1\6\25\0\22\6\1\226\12\6\5\0\4\6\4\0"+
    "\1\6\25\0\12\6\1\227\22\6\5\0\4\6\4\0"+
    "\1\6\25\0\14\6\1\230\20\6\5\0\4\6\4\0"+
    "\1\6\25\0\4\6\1\231\30\6\5\0\4\6\4\0"+
    "\1\6\25\0\11\6\1\232\23\6\5\0\4\6\4\0"+
    "\1\6\25\0\20\6\1\233\14\6\5\0\4\6\4\0"+
    "\1\6\25\0\12\6\1\234\22\6\5\0\4\6\4\0"+
    "\1\6\25\0\3\6\1\235\31\6\5\0\4\6\4\0"+
    "\1\6\25\0\4\6\1\236\30\6\5\0\4\6\4\0"+
    "\1\6\25\0\14\6\1\237\20\6\5\0\4\6\4\0"+
    "\1\6\25\0\7\6\1\240\25\6\5\0\4\6\4\0"+
    "\1\6\25\0\4\6\1\241\30\6\5\0\4\6\4\0"+
    "\1\6\25\0\1\6\1\242\33\6\5\0\4\6\4\0"+
    "\1\6\25\0\14\6\1\243\20\6\5\0\4\6\4\0"+
    "\1\6\25\0\21\6\1\244\13\6\5\0\4\6\4\0"+
    "\1\6\25\0\12\6\1\245\22\6\5\0\4\6\4\0"+
    "\1\6\25\0\6\6\1\246\26\6\5\0\4\6\4\0"+
    "\1\6\25\0\4\6\1\247\30\6\5\0\4\6\4\0"+
    "\1\6\25\0\11\6\1\250\23\6\5\0\4\6\4\0"+
    "\1\6\25\0\11\6\1\251\23\6\5\0\4\6\4\0"+
    "\1\6\25\0\1\252\34\6\5\0\4\6\4\0\1\6"+
    "\25\0\6\6\1\253\26\6\5\0\4\6\4\0\1\6"+
    "\25\0\1\6\1\254\33\6\5\0\4\6\4\0\1\6"+
    "\25\0\3\6\1\255\12\6\1\256\16\6\5\0\4\6"+
    "\4\0\1\6\25\0\11\6\1\257\23\6\5\0\4\6"+
    "\4\0\1\6\25\0\4\6\1\260\30\6\5\0\4\6"+
    "\4\0\1\6\25\0\4\6\1\261\30\6\5\0\4\6"+
    "\4\0\1\6\25\0\7\6\1\262\25\6\5\0\4\6"+
    "\4\0\1\6\25\0\1\6\1\263\33\6\5\0\4\6"+
    "\4\0\1\6\25\0\3\6\1\264\31\6\5\0\4\6"+
    "\4\0\1\6\25\0\3\6\1\265\31\6\5\0\4\6"+
    "\4\0\1\6\25\0\25\6\1\266\7\6\5\0\4\6"+
    "\4\0\1\6\25\0\14\6\1\267\20\6\5\0\4\6"+
    "\4\0\1\6\25\0\12\6\1\270\22\6\5\0\4\6"+
    "\4\0\1\6\25\0\5\6\1\271\27\6\5\0\4\6"+
    "\4\0\1\6\25\0\17\6\1\272\15\6\5\0\4\6"+
    "\4\0\1\6\25\0\6\6\1\273\26\6\5\0\4\6"+
    "\4\0\1\6\25\0\10\6\1\274\24\6\5\0\4\6"+
    "\4\0\1\6\25\0\12\6\1\275\22\6\5\0\4\6"+
    "\4\0\1\6\25\0\12\6\1\276\22\6\5\0\4\6"+
    "\4\0\1\6\25\0\6\6\1\277\26\6\5\0\4\6"+
    "\4\0\1\6\25\0\6\6\1\300\26\6\5\0\4\6"+
    "\4\0\1\6\25\0\12\6\1\301\22\6\5\0\4\6"+
    "\4\0\1\6\25\0\1\302\34\6\5\0\4\6\4\0"+
    "\1\6\25\0\1\303\34\6\5\0\4\6\4\0\1\6"+
    "\25\0\3\6\1\304\31\6\5\0\4\6\4\0\1\6"+
    "\25\0\16\6\1\305\16\6\5\0\4\6\4\0\1\6"+
    "\25\0\1\6\1\306\33\6\5\0\4\6\4\0\1\6"+
    "\25\0\3\6\1\307\31\6\5\0\4\6\4\0\1\6"+
    "\25\0\12\6\1\310\22\6\5\0\4\6\4\0\1\6"+
    "\25\0\3\6\1\311\31\6\5\0\4\6\4\0\1\6"+
    "\25\0\6\6\1\312\26\6\5\0\4\6\4\0\1\6"+
    "\25\0\7\6\1\313\25\6\5\0\4\6\4\0\1\6"+
    "\25\0\6\6\1\314\26\6\5\0\4\6\4\0\1\6"+
    "\25\0\3\6\1\315\31\6\5\0\4\6\4\0\1\6"+
    "\25\0\7\6\1\316\25\6\5\0\4\6\4\0\1\6"+
    "\25\0\3\6\1\317\31\6\5\0\4\6\4\0\1\6"+
    "\25\0\3\6\1\320\31\6\5\0\4\6\4\0\1\6"+
    "\25\0\23\6\1\321\11\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8960];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\7\1\1\11\1\1\11\11\6\1\1\11"+
    "\31\1\1\11\1\0\1\1\1\11\1\0\1\11\3\0"+
    "\13\11\1\1\4\11\37\1\2\11\143\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[209];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _ALittleLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _ALittleLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 92: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 93: break;
          case 3: 
            { return QUOTIENT;
            } 
            // fall through
          case 94: break;
          case 4: 
            { return DIGIT_CONTENT;
            } 
            // fall through
          case 95: break;
          case 5: 
            { return ID_CONTENT;
            } 
            // fall through
          case 96: break;
          case 6: 
            { return DOT;
            } 
            // fall through
          case 97: break;
          case 7: 
            { return APOS;
            } 
            // fall through
          case 98: break;
          case 8: 
            { return BACK;
            } 
            // fall through
          case 99: break;
          case 9: 
            { return QUOTE;
            } 
            // fall through
          case 100: break;
          case 10: 
            { return LBRACE;
            } 
            // fall through
          case 101: break;
          case 11: 
            { return RBRACE;
            } 
            // fall through
          case 102: break;
          case 12: 
            { return LBRACK;
            } 
            // fall through
          case 103: break;
          case 13: 
            { return RBRACK;
            } 
            // fall through
          case 104: break;
          case 14: 
            { return LPAREN;
            } 
            // fall through
          case 105: break;
          case 15: 
            { return RPAREN;
            } 
            // fall through
          case 106: break;
          case 16: 
            { return COLON;
            } 
            // fall through
          case 107: break;
          case 17: 
            { return SEMI;
            } 
            // fall through
          case 108: break;
          case 18: 
            { return COMMA;
            } 
            // fall through
          case 109: break;
          case 19: 
            { return ASSIGN;
            } 
            // fall through
          case 110: break;
          case 20: 
            { return NOT;
            } 
            // fall through
          case 111: break;
          case 21: 
            { return PLUS;
            } 
            // fall through
          case 112: break;
          case 22: 
            { return MINUS;
            } 
            // fall through
          case 113: break;
          case 23: 
            { return BIT_OR;
            } 
            // fall through
          case 114: break;
          case 24: 
            { return BIT_AND;
            } 
            // fall through
          case 115: break;
          case 25: 
            { return BIT_NOT;
            } 
            // fall through
          case 116: break;
          case 26: 
            { return LESS;
            } 
            // fall through
          case 117: break;
          case 27: 
            { return BIT_XOR;
            } 
            // fall through
          case 118: break;
          case 28: 
            { return MUL;
            } 
            // fall through
          case 119: break;
          case 29: 
            { return REMAINDER;
            } 
            // fall through
          case 120: break;
          case 30: 
            { return GREATER;
            } 
            // fall through
          case 121: break;
          case 31: 
            { return COMMENT;
            } 
            // fall through
          case 122: break;
          case 32: 
            { return QUOTIENT_ASSIGN;
            } 
            // fall through
          case 123: break;
          case 33: 
            { return CONCAT;
            } 
            // fall through
          case 124: break;
          case 34: 
            { return STRING_CONTENT;
            } 
            // fall through
          case 125: break;
          case 35: 
            { return EQ;
            } 
            // fall through
          case 126: break;
          case 36: 
            { return NOT_EQ;
            } 
            // fall through
          case 127: break;
          case 37: 
            { return PLUS_ASSIGN;
            } 
            // fall through
          case 128: break;
          case 38: 
            { return PLUS_PLUS;
            } 
            // fall through
          case 129: break;
          case 39: 
            { return MINUS_ASSIGN;
            } 
            // fall through
          case 130: break;
          case 40: 
            { return MINUS_MINUS;
            } 
            // fall through
          case 131: break;
          case 41: 
            { return BIT_OR_ASSIGN;
            } 
            // fall through
          case 132: break;
          case 42: 
            { return COND_OR;
            } 
            // fall through
          case 133: break;
          case 43: 
            { return BIT_AND_ASSIGN;
            } 
            // fall through
          case 134: break;
          case 44: 
            { return COND_AND;
            } 
            // fall through
          case 135: break;
          case 45: 
            { return LESS_OR_EQUAL;
            } 
            // fall through
          case 136: break;
          case 46: 
            { return SHIFT_LEFT;
            } 
            // fall through
          case 137: break;
          case 47: 
            { return BIT_XOR_ASSIGN;
            } 
            // fall through
          case 138: break;
          case 48: 
            { return MUL_ASSIGN;
            } 
            // fall through
          case 139: break;
          case 49: 
            { return REMAINDER_ASSIGN;
            } 
            // fall through
          case 140: break;
          case 50: 
            { return GREATER_OR_EQUAL;
            } 
            // fall through
          case 141: break;
          case 51: 
            { return SHIFT_RIGHT;
            } 
            // fall through
          case 142: break;
          case 52: 
            { return IN;
            } 
            // fall through
          case 143: break;
          case 53: 
            { return IF;
            } 
            // fall through
          case 144: break;
          case 54: 
            { return DO;
            } 
            // fall through
          case 145: break;
          case 55: 
            { return SHIFT_LEFT_ASSIGN;
            } 
            // fall through
          case 146: break;
          case 56: 
            { return SHIFT_RIGHT_ASSIGN;
            } 
            // fall through
          case 147: break;
          case 57: 
            { return NEW;
            } 
            // fall through
          case 148: break;
          case 58: 
            { return ANY;
            } 
            // fall through
          case 149: break;
          case 59: 
            { return SET;
            } 
            // fall through
          case 150: break;
          case 60: 
            { return GET;
            } 
            // fall through
          case 151: break;
          case 61: 
            { return INT;
            } 
            // fall through
          case 152: break;
          case 62: 
            { return FOR;
            } 
            // fall through
          case 153: break;
          case 63: 
            { return FUN;
            } 
            // fall through
          case 154: break;
          case 64: 
            { return MAP;
            } 
            // fall through
          case 155: break;
          case 65: 
            { return I64;
            } 
            // fall through
          case 156: break;
          case 66: 
            { return NULL;
            } 
            // fall through
          case 157: break;
          case 67: 
            { return ENUM;
            } 
            // fall through
          case 158: break;
          case 68: 
            { return ELSE;
            } 
            // fall through
          case 159: break;
          case 69: 
            { return TRUE;
            } 
            // fall through
          case 160: break;
          case 70: 
            { return THIS;
            } 
            // fall through
          case 161: break;
          case 71: 
            { return CTOR;
            } 
            // fall through
          case 162: break;
          case 72: 
            { return BOOL;
            } 
            // fall through
          case 163: break;
          case 73: 
            { return LIST;
            } 
            // fall through
          case 164: break;
          case 74: 
            { return PROTO;
            } 
            // fall through
          case 165: break;
          case 75: 
            { return CLASS;
            } 
            // fall through
          case 166: break;
          case 76: 
            { return WHILE;
            } 
            // fall through
          case 167: break;
          case 77: 
            { return FALSE;
            } 
            // fall through
          case 168: break;
          case 78: 
            { return BREAK;
            } 
            // fall through
          case 169: break;
          case 79: 
            { return ELSEIF;
            } 
            // fall through
          case 170: break;
          case 80: 
            { return STATIC;
            } 
            // fall through
          case 171: break;
          case 81: 
            { return STRING;
            } 
            // fall through
          case 172: break;
          case 82: 
            { return STRUCT;
            } 
            // fall through
          case 173: break;
          case 83: 
            { return PUBLIC;
            } 
            // fall through
          case 174: break;
          case 84: 
            { return RETURN;
            } 
            // fall through
          case 175: break;
          case 85: 
            { return DOUBLE;
            } 
            // fall through
          case 176: break;
          case 86: 
            { return PRIVATE;
            } 
            // fall through
          case 177: break;
          case 87: 
            { return FUNCTOR;
            } 
            // fall through
          case 178: break;
          case 88: 
            { return REGISTER;
            } 
            // fall through
          case 179: break;
          case 89: 
            { return INSTANCE;
            } 
            // fall through
          case 180: break;
          case 90: 
            { return NAMESPACE;
            } 
            // fall through
          case 181: break;
          case 91: 
            { return PROTECTED;
            } 
            // fall through
          case 182: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
