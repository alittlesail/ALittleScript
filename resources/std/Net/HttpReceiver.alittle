namespace ALittle;

// Http协议接口类，负责处理
public class IHttpReceiver
{

}

private auto __all_callback = new Map<string, Functor<await(IHttpReceiver, any):any>>();
Setweak(__all_callback, false, true);
protected static RegHttpCallback(string method, Functor<await(IHttpReceiver, any):any> callback)
{
    if (__all_callback[method] != null)
    {
        Error("RegHttpCallback消息回调函数注册失败，名字为"..method.."已存在");
        return;
    }
    __all_callback[method] = callback;
}
// 获取回调函数
public static FindHttpCallback(string method) : Functor<await(IHttpReceiver, any):any>
{
    return __all_callback[method];
}

private auto __all_download_callback = new Map<string, Functor<await(IHttpReceiver, any):string, int>>();
Setweak(__all_download_callback, false, true);
protected static RegHttpDownloadCallback(string method, Functor<await(IHttpReceiver, any):string, int> callback)
{
    if (__all_download_callback[method] != null)
    {
        Error("RegHttpDownloadCallback消息回调函数注册失败，名字为"..method.."已存在");
        return;
    }
    __all_download_callback[method] = callback;
}
// 获取回调函数
public static FindHttpDownloadCallback(string method) : Functor<await(IHttpReceiver, any):string, int>
{
    return __all_download_callback[method];
}

public class IHttpReceiverNative
{
    public fun Close(int http_id) {}                            // 直接关闭请求
    public fun SendString(int http_id, string content) {}       // 应答返回字符串
    public fun SendFile(int http_id, string file_path, int start_size) {}   // 应答返回本地文件
}

public class HttpReceiverTemplate<NATIVE : IHttpReceiverNative> : IHttpReceiver
{
    private int _http_id;
    private NATIVE _interface;

    public Ctor(int http_id)
    {
        this._http_id = http_id;
        this._interface = new NATIVE();
    }

    public fun Close() { this._interface.Close(this._http_id); }
    protected fun SendString(string content) { this._interface.SendString(this._http_id, content); }
    protected fun SendFile(string file_path, int start_size) { this._interface.SendFile(this._http_id, file_path, start_size); }
}