
namespace ALittle;

public class IHttpFileReceiverNative
{
    // 关闭Http请求
    public fun Close(int http_id) {}
    // 返回字符串
    public fun SendString(int http_id, string content) {}
    // 开始接受文件
    public fun StartReceiveFile(int http_id, string file_path, int start_size) {}
}

// Http文件协议接口类，负责处理
public class IHttpFileReceiver
{
    // 提供服务器使用的接口
    public await fun StartReceiveFile(string file_path, int start_size) : string {}
}

private auto __all_callback = new Map<string, Functor<await(IHttpFileReceiver, any):any>>();
Setweak(__all_callback, false, true);
protected static RegHttpFileCallback(string method, Functor<await(IHttpFileReceiver, any):any> callback)
{
    if (__all_callback[method] != null)
    {
        Error("RegHttpFileCallback消息回调函数注册失败，名字为"..method.."已存在");
        return;
    }
    __all_callback[method] = callback;
}
// 获取回调函数
public static FindHttpFileReceiverCallback(string method) : Functor<await(IHttpFileReceiver, any):any>
{
    return __all_callback[method];
}

public class HttpFileReceiverTemplate<NATIVE : IHttpFileReceiverNative> : IHttpFileReceiver
{
    private int _http_id;
    private lua.thread _co;
    private string _file_path;
    private NATIVE _interface;

    private bool _invoked;

    public Ctor(int http_id, lua.thread co)
    {
        this._http_id = http_id;
        this._co = co;
        this._invoked = false;
        this._interface = new NATIVE();
    }

    public await fun StartReceiveFile(string file_path, int start_size) : string
    {
        if (this._invoked) return "StartReceiveFile已经被调用过";
        this._invoked = true;
        this._interface.StartReceiveFile(this._http_id, file_path, start_size);
        return yield;
    }

    protected fun HandleReceiveResult(string reason)
    {
        auto result, string reason = lua.coroutine.resume(this._co, reason);
        if (!result) Error(reason);
    }

    public get invoked() : bool { return this._invoked; }

    protected fun SendString(string content)
    {
        this._interface.SendString(this._http_id, content);
    }

    public fun Clsoe()
    {
        this._interface.Close(this._http_id);
    }
}