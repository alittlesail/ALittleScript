namespace ALittle;

// 连接对象
public class IHttpInterface
{
    public fun GetID() : int {}
    public fun SetURL(string url, string content) {}
    public fun Start() {}
    public fun Stop() {}
    public fun GetResponse() : string {}
}

// 短连接所有的对象集合，提供客户端使用
private Map<int, IHttpClient> __HttpClientMap = new Map<int, IHttpClient>();
public static FindHttpClient(int id) : IHttpClient { return __HttpClientMap[id]; }

public class HttpClient<HC : IHttpInterface> : public IHttpClient
{
    private HC _interface;
    private lua.thread _co;
    private string _ip;
    private int _port;

    public Ctor(string ip, int port)
    {
        this._interface = new HC();
        this._ip = ip;
        this._port = port;
    }

    protected await fun SendRPC(string method, any content) : string, any
    {
        auto co = lua.coroutine.running();
        if (co == null)
            return "当前不是协程", null;

        this._co = co;
        __HttpClientMap[this._interface.GetID()] = this;

        string url = "http://"..this._ip..":"..this._port.."/"..method;
        if (content == null)
            this._interface.SetURL(url, null);
        else
            this._interface.SetURL(url, lua.json.encode(content));
        this._interface.Start();

        // 协程挂起，并等待返回值
        return yield;
    }

    public fun Stop()
    {
        this._interface.Stop();
    }

    public fun HandleSucceed()
    {
        __HttpClientMap[this._interface.GetID()] = null;
        auto error, Map<string, any> param = tcall(lua.json.decode, this._interface.GetResponse());
        if (error != null)
        {
            auto result, auto reason = lua.coroutine.resume(this._co, error, null);
            if (result != true) Error(reason);
            return;
        }
        if (param["error"] != null)
        {
            auto result, auto reason = lua.coroutine.resume(this._co, param["error"], null);
            if (result != true) Error(reason);
            return;
        }
        auto result, auto reason = lua.coroutine.resume(this._co, null, param);
        if (result != true) Error(reason);
    }

    public fun HandleFailed(string reason)
    {
        __HttpClientMap[this._interface.GetID()] = null;
        auto result, auto reason = lua.coroutine.resume(this._co, reason, null);
        if (result != true) Error(reason);
    }
}
