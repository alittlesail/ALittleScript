
namespace ALittle;

// 连接对象
public class IHttpFileInterface
{
    public fun GetID() : int {}
    public fun GetPath() : string {}
    public fun SetURL(string url, string file_path, bool download, int start_size) {}
    public fun Start() {}
    public fun Stop() {}
    public fun GetCurrentSize() : int {}
    public fun GetTotalSize() : int {}
}

// 短连接文件所有的对象集合，提供客户端使用
private Map<int, IHttpFileClient> __HttpFileClientMap = new Map<int, IHttpFileClient>();
public static FindHttpFileClient(int id) : IHttpFileClient { return __HttpFileClientMap[id]; }

public class HttpFileClient<HFC : IHttpFileInterface> : public IHttpFileClient
{
    private HFC _interface;
    private lua.thread _co;
    private string _ip;
    private int _port;
    private string _file_path;
    private int _start_size;
    private Functor<(IHttpFileInterface)> _callback;        // 下载或者上传的进度回调

    public Ctor(string ip, int port, string file_path, int start_size, Functor<(IHttpFileInterface)> callback)
    {
        this._interface = new HFC();
        this._ip = ip;
        this._port = port;
        this._file_path = file_path;
        this._start_size = start_size;
        this._callback = callback;
    }

    public await fun SendDownloadRPC(string method, any content) : string
    {
        auto co = lua.coroutine.running();
        if (co == null)
            return "当前不是协程";

        this._co = co;
        __HttpFileClientMap[this._interface.GetID()] = this;

        if (this._start_size == null)
            this._start_size = 0;

        // 设置URL
        string url = "http://"..this._ip..":"..this._port.."/"..method;
        this._interface.SetURL(String_UrlAppendParamMap(url, content), this._file_path, true, this._start_size);
        this._interface.Start();

        // 协程挂起，并等待返回值
        return yield;
    }

    public await fun SendUploadRPC(string method, any content) : string, any
    {
        auto co = lua.coroutine.running();
        if (co == null)
            return "当前不是协程", null;

        this._co = co;
        __HttpFileClientMap[this._interface.GetID()] = this;

        if (this._start_size == null)
            this._start_size = 0;

        // 设置URL
        string url = "http://"..this._ip..":"..this._port.."/"..method;
        this._interface.SetURL(String_UrlAppendParamMap(url, content), this._file_path, false, this._start_size);
        this._interface.Start();

        // 协程挂起，并等待返回值
        return yield;
    }

    public fun Stop()
    {
        this._interface.Stop();
    }

    public fun GetTotalSize() : int
    {
        return this._interface.GetTotalSize();
    }

    public fun HandleSucceed()
    {
        __HttpFileClientMap[this._interface.GetID()] = null;
        auto result, auto reason = lua.coroutine.resume(this._co, null, null);
        if (result != true) Error(reason);
    }

    public fun HandleFailed(string reason)
    {
        __HttpFileClientMap[this._interface.GetID()] = null;
        auto result, auto reason = lua.coroutine.resume(this._co, reason, null);
        if (result != true) Error(reason);
    }

    public fun HandleProcess()
    {
        if (this._callback != null)
            this._callback(this._interface);
    }
}
