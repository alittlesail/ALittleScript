
namespace ALittle;

private auto __all_callback = new Map<int, Functor<(IMsgClient, any)>>();
table.setweak(__all_callback, false, true);
protected static RegMsgCallback(int msg_id, Functor<(IMsgClient, any)> callback)
{
    if (__all_callback[msg_id] != null)
    {
        Error("RegMsgCallback消息回调函数注册失败，名字为"..msg_id.."已存在");
        return;
    }
    __all_callback[msg_id] = callback;
}
// 获取回调函数
public static FindMsgCallback(int msg_id) : Functor<(IMsgClient, any)>
{
    return __all_callback[msg_id];
}

// 注册回调函数
private auto __all_rpc_callback = new Map<int, Functor<await(IMsgClient, any): any>>();
private auto __all_rpc_return_id = new Map<int, int>();
table.setweak(__all_rpc_callback, false, true);
protected static RegMsgRpcCallback(int msg_id, Functor<await(IMsgClient, any) : any> callback, int return_id)
{
    if (__all_rpc_callback[msg_id] != null)
    {
        Error("RegMsgRpcCallback消息回调函数注册失败，名字为"..msg_id.."已存在");
        return;
    }
    __all_rpc_callback[msg_id] = callback;
    __all_rpc_return_id[msg_id] = return_id;
}
// 获取回调函数
public static FindMsgRpcCallback(int msg_id) : Functor<await(IMsgClient, any) : any>, int
{
    return __all_rpc_callback[msg_id], __all_rpc_return_id[msg_id];
}

public class MsgServer<MI : IMsgInterface, MWF : IMessageWriteFactory> : public MsgCommon
{
    private int _client_id;
    private string _remote_ip;
    private int _remote_port;
    private bool _is_connected;

    public Ctor(int client_id, string remote_ip, int remote_port)
    {
        // 创建客户端对象
        this._interface = new MI();
        this._interface.SetID(client_id);
        this._write_factory = new MWF();
        this._is_connected = true;

        this._client_id = client_id;
        this._remote_ip = remote_ip;
        this._remote_port = remote_port;
    }

    public get remote_ip() : string { return this._remote_ip; }
    public get remote_port() : int { return this._remote_port; }

    // 判断是否已经连接成功
    public fun IsConnected() : bool
    {
        return this._is_connected;
    }

    public fun HandleConnected()
    {
        this._is_connected = true;
    }

    public fun HandleDisconnected()
    {
        this._is_connected = false;
        this.ClearRPC("连接断开了");
    }

    public fun Close(string reason)
    {
        if (!this._is_connected) return;
        this._is_connected = false;
        if (reason == null) reason = "主动关闭连接";
        this.ClearRPC(reason);
        this._interface.Close();
    }
}

public class RouteServer<MI : IMsgInterface, MWF : IMessageWriteFactory> : public MsgCommon
{
    private int _connect_key;
    private int _route_type;
    private int _route_num;
    private bool _is_connected;

    public Ctor(int connect_key, int route_type, int route_num)
    {
        // 创建客户端对象
        this._interface = new MI();
        this._interface.SetID(connect_key);
        this._write_factory = new MWF();
        this._is_connected = true;

        this._connect_key = connect_key;
        this._route_type = route_type;
        this._route_num = route_num;
    }

    public get route_type() : int { return this._route_type; }
    public get route_num() : int { return this._route_num; }

    // 判断是否已经连接成功
    public fun IsConnected() : bool
    {
        return this._is_connected;
    }

    public fun HandleConnected()
    {
        this._is_connected = true;
    }

    public fun HandleDisconnected()
    {
        this._is_connected = false;
        this.ClearRPC("连接断开了");
    }

    public fun Close(string reason)
    {
        if (!this._is_connected) return;
        this._is_connected = false;
        if (reason == null) reason = "主动关闭连接";
        this.ClearRPC(reason);
        this._interface.Close();
    }
}
