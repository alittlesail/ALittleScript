
namespace ALittle;

// 把表设置成弱引用
public static SetWeak(table:any, key:bool, value:bool) { }

// 创建一张表
public static CreateTable() : any {}

// 是否是类
public static IsClass(table:any) : bool {}

// 获取类名
public static GetClassName(object:any) {}

// 是否是某个类
public static InstanceOf(table:any, clazz:any) : bool {}

// bind
// 把函数对象携带参数绑定成携带参数的函数对象
public static Bind(func:any, object:any, arg1:any, arg2:any, arg3:any, arg4:any, arg5:any, arg6:any, arg7:any, arg8:any) : any {}
// 使用协程的方式执行，调用之后不会有任何返回值
public static CoBind(func:any, object:any, arg1:any, arg2:any, arg3:any, arg4:any, arg5:any, arg6:any, arg7:any, arg8:any) : any {}
// 以协程的方式调用函数对象
public static CoInvoke(func:any, object:any, arg1:any, arg2:any, arg3:any) : any {}

// 设置自定义的日志函数，如果没有设置，那么默认使用lua的print
// func回调的第一个参数是打印的内容，第二个参数是打印的等级参考LogLevel枚举
enum LogLevel
{
    INFO = 0,
    WARN = 1,
    ERROR = 2,
}
public static SetLogCallback(func:Functor<(string, int)>) {}
public static Log(arg1:any, arg2:any, arg3:any, arg4:any, arg5:any, arg6:any) { }
public static Warn(arg1:any, arg2:any, arg3:any) { }
public static Error(arg1:any, arg2:any, arg3:any) { }