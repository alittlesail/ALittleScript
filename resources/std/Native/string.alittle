
register namespace lua;

public class String
{
    // Returns the internal numerical codes of the characters s[i], s[i+1], ···, s[j].
    // The default value for i is 1; the default value for j is i.
    // Note that numerical codes are not necessarily portable across platforms.
    public static byte(string content, int index) : int {}

    // Receives zero or more integers.
    // Returns a string with length equal to the number of arguments,
    //     in which each character has the internal numerical code equal to its corresponding argument.
    // Note that numerical codes are not necessarily portable across platforms.
    public static char(int value) : string {}

    // Receives a string and returns its length. The empty string "" has length 0.
    // Embedded zeros are counted, so "a\000bc\000" has length 5.
    public static len(string content) : int {}

    // Receives a string and returns a copy of this string with all uppercase letters changed to lowercase.
    // All other characters are left unchanged.
    // The definition of what an uppercase letter is depends on the current locale.
    public static lower(string content) : string {}

    // Receives a string and returns a copy of this string with all lowercase letters changed to uppercase.
    // All other characters are left unchanged.
    // The definition of what a lowercase letter is depends on the current locale.
    public static upper(string content) : string {}

    // Returns the substring of s that starts at i and continues until j; i and j can be negative.
    // If j is absent, then it is assumed to be equal to -1 (which is the same as the string length).
    // In particular, the call string.sub(s,1,j) returns a prefix of s with length j,
    //     and string.sub(s, -i) returns a suffix of s with length i.
    public static sub(string content, int start, int end) : string {}

    // Looks for the first match of pattern in the string s.
    // If it finds a match, then find returns the indices of s where this occurrence starts and ends;
    // otherwise, it returns nil. A third, optional numerical argument init specifies where to start the search;
    // its default value is 1 and can be negative.
    // A value of true as a fourth, optional argument plain turns off the pattern matching facilities,
    //     so the function does a plain "find substring" operation, with no characters in pattern being considered "magic".
    // Note that if plain is given, then init must be given as well.
    // If the pattern has captures, then in a successful match the captured values are also returned, after the two indices.
    public static find(string content, string substring, int init, bool plain) : int, int, ... {}
}