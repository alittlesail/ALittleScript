
namespace ALittle;

struct CmdCallbackInfo
{
    Functor<(...)> callback;
    List<string> var_list;
    List<string> name_list;
    string desc;
}

private auto __all_callback = new Map<string, CmdCallbackInfo>();
protected static RegCmdCallback(string method, Functor<(...)> callback, List<string> var_list, List<string> name_list, string desc)
{
    if (__all_callback[method] != null)
    {
        Error("RegCmdCallback消息回调函数注册失败，名字为"..method.."已存在");
        return;
    }
    CmdCallbackInfo info = new CmdCallbackInfo();
    info.callback = callback;
    info.var_list = var_list;
    info.name_list = name_list;
    info.desc = desc;
    __all_callback[method] = info;
}

// 处理命令行
public static ExecuteCommand(string cmd)
{
    if (cmd == "")
    {
        Warn("命令行是空");
        return;
    }

    string method = "";
    string param = "";
    int index = Find(cmd, " ");
    if (index == null)
    {
        method = cmd;
        param = "";
    }
    else
    {
        method = lua.String.sub(cmd, 1, index - 1);
        param = lua.String.sub(cmd, index + 1);
    }

    if (lua.String.upper(method) == "HELP")
    {
        List<string> method_list = new List<string>();
        for (auto method_name, auto info in __all_callback)
            Push(method_list, method_name);
        lua.table.sort(method_list);
        List<string> out_list = new List<string>();
        Push(out_list, "");
        Push(out_list, "help 打印当前模块支持的指令列表");
        for (auto index, auto method_name in method_list)
        {
            auto info = __all_callback[method_name];
            string detail = method_name.." ";
            for (auto i, auto var in info.var_list)
                detail = detail..var.." "..info.name_list[i].." ";
            detail = detail..info.desc;
            Push(out_list, detail);
        }
        Log(String_Join(out_list, "\n"));
        return;
    }

    auto info = __all_callback[method];
    if (info == null)
    {
        Warn("未知指令:"..cmd);
        return;
    }

    List<string> param_list = new List<string>();
    index = 1;
    bool in_quote = false;
    auto len = lua.String.len(param);
    int i = 1;
    while (i <= len)
    {
        auto byte = lua.String.byte(param, i);
        // 处理空格
        if (byte == 32)
        {
            // 如果在引号中，那么就要添加到当前的参数字符串
            if (in_quote)
            {
                ++i;
            }
            // 如果没有在引号中，那么就要做切割
            else
            {
                // 如果当前还未收集到字符，那么就不用切割，直接一起往后走
                if (index == i)
                {
                    ++i;
                    index = i;
                }
                // 如果当前已经收集到字符，那么就要做切割
                else
                {
                    Push(param_list, lua.String.sub(param, index, i - 1));
                    ++i;
                    index = i;
                }
            }
        }
        // 处理双引号
        elseif (byte == 34)
        {
            // 如果当前已经在引号中，那么就要做字符切割
            if (in_quote)
            {
                in_quote = false;
                if (index == i)
                {
                    Push(param_list, "");
                    ++i;
                    index = i;
                }
                else
                {
                    Push(param_list, lua.String.sub(param, index, i - 1));
                    ++i;
                    index = i;
                }
            }
            else
            {
                in_quote = true;
                if (index != i)
                {
                    Push(param_list, lua.String.sub(param, index, i - 1));
                    ++i;
                    index = i;
                }
            }
        }
        else
        {
            ++i;
        }
    }

    if (index != i)
    {
        Push(param_list, lua.String.sub(param, index, i - 1));
        ++i;
        index = i;
    }

    len = lua.table.maxn(param_list);
    int need_len = lua.table.maxn(info.var_list);
    if (len != need_len)
    {
        Warn("输入的参数数量"..len.."和指令要求"..need_len.."的不一致");
        return;
    }

    List<any> value_list = new List<any>();
    for (auto ii, auto param in param_list)
    {
        auto var_type = info.var_list[ii];
        if (var_type == "int" || var_type == "I64" || var_type == "double")
        {
            value_list[ii] = lua.tonumber(param_list[ii]);
            if (value_list[ii] == null)
            {
                Warn("输入的第"..ii.."个参数"..param_list[ii].."转为"..var_type.."失败");
                return;
            }
        }
        elseif (var_type == "string")
        {
            value_list[ii] = param_list[ii];
        }
        elseif (var_type == "bool")
        {
            if (param_list[ii] == "true")
                value_list[ii] = true;
            elseif (param_list[ii] == "false")
                value_list[ii] = false;
            else
            {
                Warn("输入的第"..ii.."个参数"..param_list[ii].."转为"..var_type.."失败");
                return;
            }
        }
        else
        {
            auto error, any value = tcall(lua.json.decode, param_list[ii]);
            if (error != null)
            {
                Warn("输入的第"..ii.."个参数"..param_list[ii].."转为"..var_type.."失败");
                return;
            }
            value_list[ii] = value;
        }
    }

    info.callback(lua.unpack(value_list, 1, len));
}