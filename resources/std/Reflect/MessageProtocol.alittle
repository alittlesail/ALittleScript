
namespace ALittle;

// 序列化接口类
public class IMessageWriteFactory
{
    public fun SetID(int id) {}
    public fun SetRpcID(int id) {}
    public fun ResetOffset() {}
    public fun GetOffset() : int {}
    public fun SetInt(int offset, int value) {}

    public fun WriteBool(bool value) : int {}
    public fun WriteInt(int value) : int {}
    public fun WriteLongLong(I64 value) : int {}
    public fun WriteString(string value) : int {}
    public fun WriteDouble(double value) : int {}
}

// 反序列化接口类
public class IMessageReadFactory
{
    public fun GetTotalSize() : int {}

    public fun ReadBool() : bool {}
    public fun ReadInt() : int {}
    public fun ReadLongLong() : I64 {}
    public fun ReadString() : string {}
    public fun ReadDouble() : double {}
    public fun GetReadSize() : int {}
}

protected struct ProtocolInvokeInfo
{
    // 当前结构体的序列化和反序列化方法
    Functor<(IMessageWriteFactory, ProtocolInvokeInfo, any):int> wfunc;
    Functor<(IMessageReadFactory, ProtocolInvokeInfo, int):any, int> rfunc;

    // 当这个结构体是上级的成员变量时，那么这个不为空
    string var_name;

    // 当前是Map时
    ProtocolInvokeInfo key_info;
    ProtocolInvokeInfo value_info;

    // 当前是List时
    ProtocolInvokeInfo sub_info;

    // 当前是Message，各个成员变量的结构体
    List<ProtocolInvokeInfo> handle;
}

// 注册回调函数
private Map<int, Functor<(IMsgClient, any) : any>> __all_callback = new Map<int, Functor<(IMsgClient, any) : any>>();
private Map<int, int> __all_return_id = new Map<int, int>();
table.setweak(__all_callback, false, true);
protected static RegMsgCallback(int msg_id, Functor<(IMsgClient, any) : any> callback, int return_id)
{
    if (__all_callback[msg_id] != null)
    {
        Error("RegMessageCallback消息回调函数注册失败，名字为"..msg_id.."已存在");
        return;
    }
    __all_callback[msg_id] = callback;
    __all_return_id[msg_id] = return_id;
}
// 获取回调函数
public static FindMessageCallback(int msg_id) : Functor<(IMsgClient, any) : any>, int
{
    return __all_callback[msg_id], __all_return_id[msg_id];
}

//序列化部分////////////////////////////////////////////////////////////////////////////////////////////////////////////-

private static PS_WriteBool(IMessageWriteFactory factory, ProtocolInvokeInfo var_info, bool var_value) : int
{
    if (var_value == null)
        return factory.WriteBool(false);
    return factory.WriteBool(var_value);
}

private static PS_WriteInt(IMessageWriteFactory factory, ProtocolInvokeInfo var_info, int var_value) : int
{
    if (var_value == null)
        return factory.WriteInt(0);
    return factory.WriteInt(var_value);
}

private static PS_WriteString(IMessageWriteFactory factory, ProtocolInvokeInfo var_info, string var_value) : int
{
    if (var_value == null)
        return factory.WriteString("");
    return factory.WriteString(var_value);
}

private static PS_WriteDouble(IMessageWriteFactory factory, ProtocolInvokeInfo var_info, double var_value) : int
{
    if (var_value == null)
        return factory.WriteDouble(0);
    return factory.WriteDouble(var_value);
}

private static PS_WriteLongLong(IMessageWriteFactory factory, ProtocolInvokeInfo var_info, I64 var_value) : int
{
    if (var_value == null)
        return factory.WriteLongLong(0);
    return factory.WriteLongLong(var_value);
}

private static PS_WriteArray(IMessageWriteFactory factory, ProtocolInvokeInfo var_info, List<any> var_value) : int
{
    if (var_value == null)
        return factory.WriteInt(0);
    auto offset = factory.GetOffset();
    auto len = factory.WriteInt(0);
    auto sub_info = var_info.sub_info;
    auto sub_func = sub_info.wfunc;
    auto count = 0;
    for (auto index, auto value in var_value)
    {
        len = len + sub_func(factory, sub_info, value);
        count = count + 1;
    }
    factory.SetInt(offset, count);
    return len;
}

private static PS_WriteMap(IMessageWriteFactory factory, ProtocolInvokeInfo var_info, Map<string, any> var_value) : int
{
    if (var_value == null)
        return factory.WriteInt(0);

    auto offset = factory.GetOffset();
    auto len = factory.WriteInt(0);
    auto key_info = var_info.key_info;
    auto key_func = key_info.wfunc;
    auto value_info = var_info.value_info;
    auto value_func = value_info.wfunc;
    auto count = 0;
    for (auto key, auto value in var_value)
    {
        len = len + key_func(factory, key_info, key);
        len = len + value_func(factory, value_info, value);
        count = count + 1;
    }
    factory.SetInt(offset, count);
    return len;
}

private static PS_WriteMessage(IMessageWriteFactory factory, ProtocolInvokeInfo var_info, any var_value) : int
{
    if (var_value == null)
    {
        auto offset = factory.GetOffset();
        auto pre_size = factory.WriteInt(0);
        auto size = 0;
        for (auto index, auto info in var_info.handle)
            size = size + info.wfunc(factory, info, null);
        factory.SetInt(offset, size);
        return pre_size + size;
    }
    auto offset = factory.GetOffset();
    auto pre_size = factory.WriteInt(0);
    auto size = 0;
    for (auto index, auto info in var_info.handle)
        size = size + info.wfunc(factory, info, cast<Map<string, any>>(var_value)[info.var_name]);
    factory.SetInt(offset, size);
    return pre_size + size;
}

protected static PS_WriteMessageForSend(IMessageWriteFactory factory, ProtocolInvokeInfo var_info, any var_value) : int
{
    if (var_value == null)
    {
        auto offset = factory.GetOffset();
        auto size = 0;
        for (auto index, auto info in var_info.handle)
            size = size + info.wfunc(factory, info, null);
        return size;
    }
    auto offset = factory.GetOffset();
    auto size = 0;
    for (auto index, auto info in var_info.handle)
        size = size + info.wfunc(factory, info, cast<Map<string, any>>(var_value)[info.var_name]);

    return size;
}

//反序列化部分//////////////////////////////////////////////////////////////////////////////////////////////////////////-

private static PS_ReadBool(IMessageReadFactory factory, ProtocolInvokeInfo var_info, int len) : bool, int
{
    if (len == 0)
        return false, 0;
    if (len < 1)
        return false, -1;
    return factory.ReadBool(), 1;
}

private static PS_ReadInt(IMessageReadFactory factory, ProtocolInvokeInfo var_info, int len) : int, int
{
    if (len == 0)
        return 0, 0;
    if (len < 4)
        return 0, -1;
    return factory.ReadInt(), 4;
}

private static PS_ReadString(IMessageReadFactory factory, ProtocolInvokeInfo var_info, int len) : string, int
{
    if (len == 0)
        return "", 0;
    return factory.ReadString(), factory.GetReadSize();
}

private static PS_ReadDouble(IMessageReadFactory factory, ProtocolInvokeInfo var_info, int len) : double, int
{
    if (len == 0)
        return 0, 0;
    if (len < 8)
        return 0, -1;
    return factory.ReadDouble(), 8;
}

private static PS_ReadLongLong(IMessageReadFactory factory, ProtocolInvokeInfo var_info, int len) : I64, int
{
    if (len == 0)
        return 0, 0;
    if (len < 8)
        return 0, -1;
    return factory.ReadLongLong(), 8;
}

private static PS_ReadArray(IMessageReadFactory factory, ProtocolInvokeInfo var_info, int len) : List<any>, int
{
    if (len == 0)
        return new List<any>(), 0;
    auto save_len = len;
    if (len < 4)
        return null, -1;
    auto count = factory.ReadInt();
    len = len - 4;
    if (count < 0)
        return null, -1;
    auto sub_info = var_info.sub_info;
    auto sub_func = sub_info.rfunc;
    auto sub_len = 0;
    auto value_list = new List<any>();
    for (auto index = 1, count, 1)
    {
        value_list[index], sub_len = sub_func(factory, sub_info, len);
        if (sub_len < 0)
            return null, sub_len;
        len = len - (sub_len);
    }
    return value_list, save_len - len;
}

private static PS_ReadMap(IMessageReadFactory factory, ProtocolInvokeInfo var_info, int len) : Map<string, any>, int
{
    if (len == 0)
        return new Map<string, any>(), 0;
    auto save_len = len;
    if (len < 4)
        return null, -1;
    auto count = factory.ReadInt();
    len = len - 4;
    if (count < 0)
        return null, -1;
    auto key_info = var_info.key_info;
    auto key_func = key_info.rfunc;
    auto value_info = var_info.value_info;
    auto value_func = value_info.rfunc;
    auto value_map = new Map<string, any>();
    for (auto index = 1, count, 1)
    {
        auto key, auto key_len = key_func(factory, key_info, len);
        if (key_len < 0)
            return null, key_len;
        len = len - key_len;
        auto value, auto value_len = value_func(factory, value_info, len);
        if (value_len < 0)
            return null, value_len;
        len = len - value_len;
        value_map[key] = value;
    }
    return value_map, save_len - len;
}

private static PS_ReadMessage(IMessageReadFactory factory, ProtocolInvokeInfo var_info, int len) : any, int
{
    if (len == 0)
    {
        auto value_map = new Map<string, any>();
        auto sub_len = 0;
        for (auto index, auto info in var_info.handle)
            value_map[info.var_name], sub_len = info.rfunc(factory, info, 0);
        return value_map, 0;
    }
    if (len < 4)
        return null, -1;
    auto object_len = factory.ReadInt();
    len = len - 4;
    auto save_len = 4;
    if (object_len > len)
        return null, -1;
    save_len = save_len + object_len;
    auto sub_len = 0;
    auto value_map = new Map<string, any>();
    for (auto index, auto info in var_info.handle)
    {
        value_map[info.var_name], sub_len = info.rfunc(factory, info, object_len);
        if (sub_len < 0)
            return null, sub_len;
        object_len = object_len - sub_len;
    }
    return value_map, save_len;
}

protected static PS_ReadMessageForReceive(IMessageReadFactory factory, ProtocolInvokeInfo var_info, int len) : any, int
{
    if (len == 0)
    {
        auto value_map = new Map<string, any>();
        auto sub_len = 0;
        for (auto index, auto info in var_info.handle)
            value_map[info.var_name], sub_len = info.rfunc(factory, info, 0);
        return value_map, 0;
    }
    auto sub_len = 0;
    auto value_map = new Map<string, any>();
    for (auto index, auto info in var_info.handle)
    {
        value_map[info.var_name], sub_len = info.rfunc(factory, info, len);
        if (sub_len < 0)
            return null, sub_len;
        len = len - sub_len;
    }
    return value_map, len;
}

//回调注册部分//////////////////////////////////////////////////////////////////////////////////////////////////////////-

private auto __ps_write_data_map = new Map<string, any>();
__ps_write_data_map["bool"] = PS_WriteBool;
__ps_write_data_map["int"] = PS_WriteInt;
__ps_write_data_map["I64"] = PS_WriteLongLong;
__ps_write_data_map["string"] = PS_WriteString;
__ps_write_data_map["double"] = PS_WriteDouble;

private auto __ps_read_data_map = new Map<string, any>();
__ps_read_data_map["bool"] = PS_ReadBool;
__ps_read_data_map["int"] = PS_ReadInt;
__ps_read_data_map["I64"] = PS_ReadLongLong;
__ps_read_data_map["string"] = PS_ReadString;
__ps_read_data_map["double"] = PS_ReadDouble;

//构造部分//////////////////////////////////////////////////////////////////////////////////////////////////////////-
private auto __find = String.find;
private auto __sub = String.sub;
private auto __len = String.len;
private auto __byte = String.byte;
private auto __assert = assert;
private static CreateSubInfo(string sub_type) : ProtocolInvokeInfo
{
    if (__find(sub_type, "List", 1) == 1)
        return CreateArrayInfo(sub_type);
    if (__find(sub_type, "Map", 1) == 1)
        return CreateMapInfo(sub_type);
    auto wfunc = __ps_write_data_map[sub_type];
    if (wfunc != null)
    {
        auto sub_info = new ProtocolInvokeInfo();
        sub_info.wfunc = wfunc;
        sub_info.rfunc = __ps_read_data_map[sub_type];
        return sub_info;
    }
    return CreateMessageInfo(sub_type);
}

private static CreateArrayInfo(string var_type) : ProtocolInvokeInfo
{
    auto invoke_info = new ProtocolInvokeInfo();
    invoke_info.wfunc = PS_WriteArray;
    invoke_info.rfunc = PS_ReadArray;
    invoke_info.sub_info = CreateSubInfo(__sub(var_type, 6, -2));
    return invoke_info;
}

private static CreateMapInfo(string var_type) : ProtocolInvokeInfo
{
    auto invoke_info = new ProtocolInvokeInfo();
    auto sub_type = __sub(var_type, 5, -2);
    auto comma_index = 0;
    auto sub_type_len = __len(sub_type);
    auto ltgt = 0;
    for (int i = 1, sub_type_len, 1)
    {
        auto code = __byte(sub_type, i);
        if (code == 60)
            ltgt = ltgt + 1;
        elseif (code == 62)
            ltgt = ltgt - 1;
        elseif (code == 44)
        {
            if (ltgt == 0)
            {
                comma_index = i;
                break;
            }
        }
    }
    assert(comma_index != 0, "can'f find comma in var_type:" .. var_type);
    invoke_info.wfunc = PS_WriteMap;
    invoke_info.rfunc = PS_ReadMap;
    invoke_info.key_info = CreateSubInfo(__sub(sub_type, 1, comma_index - 1));
    invoke_info.value_info = CreateSubInfo(__sub(sub_type, comma_index + 1));
    return invoke_info;
}

private static CreateMessageInfo(string var_type) : ProtocolInvokeInfo
{
    auto reflect_info = FindReflectByName(var_type);
    __assert(reflect_info != null, "FindReflect调用失败! 未知类型:" .. var_type);
    return CreateMessageInfoImpl(reflect_info);
}

private static CreateMessageInfoImpl(ReflectInfo reflect_info) : ProtocolInvokeInfo
{
    auto invoke_info = new ProtocolInvokeInfo();
    invoke_info.wfunc = PS_WriteMessage;
    invoke_info.rfunc = PS_ReadMessage;
    auto handle = new List<ProtocolInvokeInfo>();
    invoke_info.handle = handle;
    auto handle_count = 0;
    for (auto index, auto var_name in reflect_info.name_list)
    {
        auto var_info = CreateSubInfo(reflect_info.type_list[index]);
        var_info.var_name = var_name;
        handle_count = handle_count + 1;
        handle[handle_count] = var_info;
    }
    return invoke_info;
}

protected static CreateProtocolInvokeInfo(int msg_id) : ProtocolInvokeInfo
{
    auto reflect_info = FindReflectById(msg_id);
    __assert(reflect_info != null, "FindReflect调用失败! 未知ID:" .. msg_id);
    return CreateMessageInfoImpl(reflect_info);
}
