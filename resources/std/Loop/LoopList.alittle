
namespace ALittle;

public class LoopList : public LoopObject
{
    private int _count;              // updater个数
    private int _cur_index;          // 当前执行的updater下标
    private List<LoopObject> _update_list;   // updater列表
    private Functor<()> _complete_callback;  // 完成后会调用这个函数

    public Ctor()
    {
        this._count = 0;                // updater个数
        this._cur_index = 1;        // 当前执行的updater下标
        this._update_list = new List<LoopObject>();        // updater列表
        this._complete_callback = null;    // 完成后会调用这个函数
    }

    public get complete_callback() : Functor<()>
    {
        return this._complete_callback;
    }

    public set complete_callback(Functor<()> value)
    {
        this._complete_callback = value;
    }

    public get total_count() : int
    {
        return this._count;
    }

    // 添加updater
    public fun AddUpdater(LoopObject value)
    {
        if (value == null) return;
        ++ this._count;
        this._update_list[this._count] = value;
    }

    // 移除updater
    public fun RemoveUpdater(LoopObject value)
    {
        if (value == null || this._count == 0)
            return;
            
        for (int index, LoopObject updater in this._update_list)
        {
            if (value == updater)
            {
                if (this._cur_index > index)
                    -- this._cur_index;
                table.remove(this._update_list, index);
                -- this._count;
                break;
            }
        }
    }

    // 重置所有updater
    public fun Reset()
    {
        this._cur_index = 1;
        for (int index, LoopObject updater in this._update_list)
            updater.Reset();
    }

    // 设置时间
    public fun SetTime(int time) : int, bool
    {
        // 初始化所有updater
        for (int index, LoopObject updater in this._update_list)
            updater.SetTime(0);
        this._cur_index = 1;
        if (time <= 0) return 0, false;

        // 遍历updater设置时间
        for (int index, LoopObject updater in this._update_list)
        {
            bool completed;
            time, completed = updater.SetTime(time);
            if (!completed)
            {
                this._cur_index = index;
                return 0, false;
            }
        }
        // 如果超过时间，设置为末尾下标
        this._cur_index = this._count + 1;
        return time, true;
    }

    public fun IsCompleted() : bool
    {
        return this._cur_index > this._count;
    }

    public fun Completed()
    {
        if (this._complete_callback != null)
            this._complete_callback();
    }

    // 设置为完成
    public fun SetCompleted()
    {
        for (int index = this._cur_index, this._count, 1)
            this._update_list[index].SetCompleted();

        this._cur_index = this._count + 1;
    }

    // 更新
    public fun Update(int frame_time)
    {
        if (this._cur_index > this._count)
            return;
        LoopObject updater = this._update_list[this._cur_index];
        updater.Update(frame_time);
        if (updater.IsCompleted())
        {
            ++ this._cur_index;
            updater.Completed();
        }
    }

    // 启动
    public fun Start()
    {
        A_LoopSystem.AddUpdater(this);
    }

    // 移除
    public fun Close()
    {
        A_LoopSystem.RemoveUpdater(this);
    }
}
