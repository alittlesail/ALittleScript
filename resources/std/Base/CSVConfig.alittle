
namespace ALittle;

protected class CSVConfig
{
    protected ICSVFile _csv_file;
    protected ReflectInfo _reflect_info;
    protected CSVInvokeInfo _csv_info;

    public fun Init(ICSVFile loader)
    {
        this._csv_file = loader;
    }

    public fun GetFieldInfo(string field) : int, bool
    {
        int field_index = 0;
        bool is_number = false;
        for (int index, auto name in this._reflect_info.name_list)
        {
            if (name == field)
            {
                field_index = index;
                auto var_type = this._reflect_info.type_list[index];
                is_number = var_type == "int" || var_type == "double" || var_type == "I64";
                break;
            }
        }
        return field_index, is_number;
    }

    public fun GetFieldNameList() : List<string>
    {
        return this._reflect_info.name_list;
    }

    public fun ReadCell(int lua_row, int lua_col) : string
    {
        return this._csv_file.ReadCell(lua_row, lua_col);
    }

    private fun LoadCell(int row) : any
    {
        Map<string, any> value = table.create();
        for (int index, auto handle in this._csv_info.handle)
        {
            value[handle.var_name] = handle.func(this._csv_file.ReadCell(row, index), handle);
        }
        return value;
    }
}

class KeyValueConfig
{
    private Map<string, string> _data;

    public Ctor()
    {
        this._data = new Map<string, string>();
    }

    public fun Init(ICSVFile loader)
    {
        this._data = new Map<string, string>();
        if (loader == null) return;

        int row_count = loader.GetRowCount();
        for (int row = 1, row_count, 1)
        {
            string key = loader.ReadCell( row, 1);
            string value = loader.ReadCell(row, 2);
            if (key != null && value != null)
                this._data[key] = value;
        }
        loader.Close();
    }

    public fun GetString(string key, string default) : string
    {
        string value = this._data[key];
        if (value == null) return default;
        return value;
    }

    public fun GetInt(string key, int default) : int
    {
        string value = this._data[key];
        if (value == null) return default;
        if (value == "") return 0;
        return math.floor(tonumber(value));
    }

    public fun GetDouble(string key, double default) : double
    {
        string value = this._data[key];
        if (value == null) return default;
        if (value == "") return 0;
        return tonumber(value);
    }

    public fun GetIntList(string key, List<int> default) : List<int>
    {
        string value = this._data[key];
        if (value == null) return default;
        auto list = String_Split(value, __split_list_last);
        List<int> int_list = new List<int>();
        for (auto index, auto v in list)
        {
            if (v == "") int_list[index] = 0;
            else int_list[index] = math.floor(tonumber(v));
        }
        return int_list;
    }

    public fun GetDoubleList(string key, List<double> default) : List<double>
    {
        string value = this._data[key];
        if (value == null) return default;
        auto list = String_Split(value, __split_list_last);
        List<double> double_list = new List<double>();
        for (auto index, auto v in list)
        {
            if (v == "") double_list[index] = 0;
            else double_list[index] = tonumber(v);
        }
        return double_list;
    }

    public fun GetStringList(string key, List<string> default) : List<string>
    {
        string value = this._data[key];
        if (value == null) return default;
        return String_Split(value, __split_list_last);
    }
}

class SingleKeyTableConfig<T> : public CSVConfig
{
    private Map<any, int> _key_map;
    private Map<any, any> _cache_map;

    public Ctor(ReflectInfo reflect_info)
    {
        this._reflect_info = reflect_info;
        this._key_map = new Map<any, int>();
        this._cache_map = new Map<any, any>();
        table.setweak(this._cache_map, false, true);
    }

    public get key_map() : Map<any, int> { return this._key_map; }

    public fun Init(ICSVFile loader)
    {
        if (this._csv_file != null) this._csv_file.Close();
        this._csv_file = loader;
        if (this._csv_file == null) return;

        string key_type = this._reflect_info.name_list[1];
        bool is_number = key_type == "int" || key_type == "double" || key_type == "I64";

        int row_count = this._csv_file.GetRowCount();
        for (int row = 1, row_count, 1)
        {
            string value = this._csv_file.ReadCell(row, 1);
            if (value != null)
            {
                if (is_number)
                    this._key_map[tonumber(value)] = row;
                else
                    this._key_map[value] = row;
            }
        }
    }

    public fun GetData(any key) : T
    {
        if (this._csv_file == null) return null;

        any value = this._cache_map[key];
        if (value != null) return value;

        int row = this._key_map[key];
        if (row == null) return null;

        value = this.LoadCell(row);
        if (value == null) return null;

        this._cache_map[key] = value;
        return value;
    }

    public fun CreateIndex(string field) : SingleKeyTableIndexConfig<T>
    {
        if (this._csv_file == null) return null;

        int col_index, bool is_number = this.GetFieldInfo(field);
        if (col_index == 0) return null;

        return new SingleKeyTableIndexConfig<T>(this, col_index, is_number);
    }
}

class SingleKeyTableIndexConfig<T>
{
    private SingleKeyTableConfig<T> _parent;
    private Map<any, Map<any, bool>> _value_map;

    public Ctor(SingleKeyTableConfig<T> parent, int col_index, bool is_number)
    {
        this._parent = parent;
        this._value_map = new Map<any, Map<any, bool>>();

        for (any key, int row in this._parent.key_map)
        {
            any value;
            if (is_number)
                value = tonumber(this._parent.ReadCell(row, col_index));
            else
                value = this._parent.ReadCell(row, col_index);

            Map<any, bool> key_set = this._value_map[value];
            if (key_set == null)
            {
                key_set = new Map<any, bool>();
                this._value_map[value] = key_set;
            }
            key_set[key] = true;
        }
    }

    public fun GetKeySet(any key) : Map<any, bool>
    {
        return this._value_map[key];
    }

    public fun GetOne(any key) : T
    {
        auto keys = this._value_map[key];
        if (keys == null) return null;
        for (auto k, auto _ in keys)
            return this._parent.GetData(k);
        return null;
    }

    public fun GetList(any key) : List<T>
    {
        auto list = new List<T>();
        auto keys = this._value_map[key];
        if (keys == null) return list;

        auto count = 0;
        for (auto k, auto _ in keys)
        {
            ++ count;
            list[count] = this._parent.GetData(k);
        }
        return list;
    }
}

class DoubleKeyTableConfig<T> : public CSVConfig
{
    private Map<any, Map<any, int>> _key_map;
    private Map<any, Map<any, any>> _cache_map;

    public Ctor(ReflectInfo reflect_info)
    {
        this._reflect_info = reflect_info;
        this._key_map = new Map<any, Map<any, int>>();
        this._cache_map = new Map<any, Map<any, any>>();
        table.setweak(this._cache_map, false, true);
    }

    public fun Init(ICSVFile loader)
    {
        if (this._csv_file != null) this._csv_file.Close();
        this._csv_file = loader;
        if (this._csv_file == null) return;

        string first_key_type = this._reflect_info.name_list[1];
        bool first_is_number = first_key_type == "int" || first_key_type == "double" || first_key_type == "I64";
        string second_key_type = this._reflect_info.name_list[2];
        bool second_is_number = second_key_type == "int" || second_key_type == "double" || second_key_type == "I64";

        int row_count = this._csv_file.GetRowCount();
        for (int row = 1, row_count, 1)
        {
            Map<any, int> tmp;
            string value = this._csv_file.ReadCell(row, 1);
            if (value != null)
            {
                if (first_is_number)
                {
                    tmp = this._key_map[tonumber(value)];
                    if (tmp == null)
                    {
                        tmp = new Map<any, int>();
                        this._key_map[tonumber(value)] = tmp;
                    }
                }
                else
                {
                    tmp = this._key_map[value];
                    if (tmp == null)
                    {
                        tmp = new Map<any, int>();
                        this._key_map[value] = tmp;
                    }
                }
            }

            value = this._csv_file.ReadCell(row, 2);
            if (value != null)
            {
                if (second_is_number)
                    tmp[tonumber(value)] = row;
                else
                    tmp[value] = row;
            }
        }
    }

    public fun GetData(any first_key, any second_key) : T
    {
        if (this._csv_file == null) return null;

        any value = this._cache_map[first_key];
        if (value != null)
        {
            value = cast<Map<string,any>>(value)[second_key];
            if (value != null) return value;
        }

        Map<any, int> key_tmp = this._key_map[first_key];
        if (key_tmp == null) return null;

        int row = key_tmp[second_key];
        if (row == null) return null;

        value = this.LoadCell(row);
        if (value == null) return null;

        Map<any, any> tmp = this._cache_map[first_key];
        if (tmp == null)
        {
            tmp = new Map<any, any>();
            this._cache_map[first_key] = tmp;
        }
        tmp[second_key] = value;
        return value;
    }
}