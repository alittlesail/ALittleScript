
namespace ALittle;

public class SqliteDBStmt
{
    private Sqlite3Stmt _stmt;
    private any _key;
    private any _nrows;
    private any _row;

    public Ctor(Sqlite3Stmt stmt)
    {
        this._stmt = stmt;
        this._nrows = this._stmt.nrows();
    }

    public fun HasNextRow() : bool
    {
        if (this._nrows == null) return false;

        auto key, auto row = next(this._nrows, this._key);
        if (row != null)
        {
            this._key = key;
            this._row = row;
            return true;
        }

        this.Reset();
        return false;
    }

    public fun GetNextRow() : any
    {
        return this._row;
    }

    public fun Reset()
    {
        this._stmt.reset();
        this._key = null;
        this._nrows = null;
        this._row = null;
    }

    public fun BindValues(...) { this._stmt.bind_values(...); }
}

public class SqliteDBObject
{
    private Sqlite3Object _db;
    public Ctor(Sqlite3Object db)
    {
        this._db = db;
    }

    public fun Prepare(string sql) : SqliteDBStmt
    {
        auto stmt = this._db.prepare(sql);
        if (stmt == null) return null;
        return new SqliteDBStmt(stmt);
    }

    public fun Close() { this._db.close(); }

    public fun Exec(string sql) { this._db.exec(sql); }
}

public class SqliteDB
{
    public static Open(string db_path) : SqliteDBObject
    {
        auto db = Sqlite3.open(db_path);
        if (db == null) return null;
        return new SqliteDBObject(db);
    }
}