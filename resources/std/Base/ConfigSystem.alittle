namespace ALittle;

public class ConfigSystem<FL : IFileLoader, FS : IFileSaver>
{
    private string              _file_path;
    private Map<string, any>    _config_map;

    public Ctor(string file_path)
    {
        // 保存路径
        this._file_path = file_path;
        // 定义KEY-VALUE映射
        this._config_map = new Map<string, any>();

        // 读取全部内容
        auto file = new FL();
        string content = file.Load(this._file_path);
        if (content == null) return;

        // 解析配置文件
        string error, any json_content = pcall(Json.decode, content);
        if (error != null)
        {
            Log("Json Decode failed." .. file_path .. ", " .. error);
            return;
        }
        // 保存解析内容
        this._config_map = json_content;
    }

    public fun GetConfig(string key, any default) : any
    {
        // 获取值
        any value = this._config_map[key];
        // 如果为空则返回默认值
        if (value == null) return default;
        return value;
    }

    public fun GetInt(string key, int default) : int
    {
        return math.floor(tonumber(this.GetConfig(key, default)));
    }

    public fun GetDouble(string key, double default) : double
    {
        return tonumber(this.GetConfig(key, default));
    }

    public fun GetString(string key, string default) : string
    {
        return tostring(this.GetConfig(key, default));
    }

    public fun SetConfig(string key, any value, bool not_save)
    {
        // 保存新值
        this._config_map[key] = value;
        if (!not_save)
            this.SaveConfig();
    }

    public fun CoverConfig(Map<string, any> msg, bool save)
    {
        for (string k, any v in msg)
            this._config_map[k] = v;
        if (!save)
            this.SaveConfig();
    }

    public fun SaveConfig()
    {
        // 保存配置值
        auto file = new FS();
        if (!file.Save(this._file_path, Json.encode(this._config_map)))
        {
            Log("Save Congig Failed.", this._file_path);
        }
    }
}