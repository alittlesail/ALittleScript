
namespace ALittle;

public struct Event
{
    string type;
    EventDispatcher target;
}

public class EventDispatcher
{
    // 侦听对象，保存所有侦听这个控件的逻辑对象，以及它们的回调函数
    protected Map<string, Map<any, Map<Functor<(any, Event)>, bool> > > _listeners;
    // 是否禁用，如果_abs_disable为true，那么它调用DispatchEvent时什么都不做
    protected bool _abs_disabled;

    public Ctor()
    {
        this._listeners = new Map<string, Map<any, Map<Functor<(any, Event)>, bool> > >();
        this._abs_disabled = false;
    }

    // 添加侦听对象：侦听事件类型，侦听对象，以及回调函数
    // event_type 侦听的时间类型
    // object 回调函数的对象
    // callback object的回调函数
    public fun AddEventListener(string event_type, any object, Functor<(any, Event)> callback) : bool
    {
        if (object == null) return false;
        if (callback == null) return false;

        Map<any, Map<Functor<(any, Event)>, bool> > callback_table = this._listeners[event_type];
        if (callback_table == null)
        {
            // 创建回调映射表
            callback_table = new Map<any, Map<Functor<(any, Event)>, bool> >();
            // 设置为弱引用表
            table.setweak(callback_table, true, false);
            // 保存表
            this._listeners[event_type] = callback_table;
        }

        // 获取当前注册的函数
        Map<Functor<(any, Event)>, bool> callback_value = callback_table[object];
        // 如果是空的直接赋值
        if (callback_value == null)
        {
            callback_value = new Map<Functor<(any, Event)>, bool>();
            callback_table[object] = callback_value;
        }

        callback_value[callback] = true;
        return true;
    }

    // 移除侦听对象：侦听事件类型，侦听对象
    public fun RemoveEventListener(string event_type, any object, Functor<(any, Event)> callback)
    {
        Map<any, Map<Functor<(any, Event)>, bool> > callback_table = this._listeners[event_type];
        if (callback_table == null) return;

        // 将要删除的侦听对象置为nil
        if (callback == null)
            callback_table[object] = null;
        else
        {
            Map<Functor<(any, Event)>, bool> callback_value = callback_table[object];
            if (callback_value == null) return;
            callback_value[callback] = null;
        }
    }

    // 清理所有侦听
    public fun ClearEventListener()
    {
        this._listeners = new Map<string, Map<any, Map<Functor<(any, Event)>, bool> > >();
    }

    public fun DispatchEventType(string type)
    {
        Event event = new Event();
        event.target = this;
        event.type = type;
        this.DispatchEvent(event);
    }

    // 分发事件
    public fun DispatchEvent(Event event)
    {
        // 根据事件类型，获得所有侦听者
        Map<any, Map<Functor<(any, Event)>, bool> > callback_table = this._listeners[event.type];
        // 检查event的type属性，如果没有则什么都不做。所以每个event必须要有一个type属性
        if (callback_table == null) return;
        // 遍历所有侦听者
        for (any object, Map<Functor<(any, Event)>, bool> callback_value in callback_table)
        {
            // 依次调用它们的回调函数
            for (Functor<(any, Event)> func, bool _ in callback_value)
                func(object, event);
        }
    }
}