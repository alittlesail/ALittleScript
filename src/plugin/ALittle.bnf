{
  parserClass="plugin.parser.ALittleParser"

  mixin="com.intellij.extapi.psi.ASTWrapperPsiElement"
  methods=[guessType guessTypes getReference]
  psiClassPrefix="ALittle"
  psiImplClassSuffix="Impl"
  psiPackage="plugin.psi"
  psiImplPackage="plugin.psi.impl"
  psiImplUtilClass="plugin.psi.ALittlePsiImplUtil"

  elementTypeHolderClass="plugin.psi.ALittleTypes"
  elementTypeClass="plugin.psi.ALittleElementType"
  tokenTypeClass="plugin.psi.ALittleTokenType"

  tokens=[
      LBRACE                =  '{'
      RBRACE                =  '}'
      LBRACK                =  '['
      RBRACK                =  ']'
      LPAREN                =  '('
      RPAREN                =  ')'
      COLON                 =  ':'
      SEMI                  =  ';'
      COMMA                 =  ','
      EQ                    =  '=='
      ASSIGN                =  '='
      NOT_EQ                =  '!='
      NOT                   =  '!'
      PLUS_PLUS             =  '++'
      PLUS_ASSIGN           =  '+='
      PLUS                  =  '+'
      CONCAT                =  '..'
      MINUS_MINUS           =  '--'
      MINUS_ASSIGN          =  '-='
      MINUS                 =  '-'
      COND_OR               =  '||'
      COND_AND              =  '&&'
      LESS_OR_EQUAL         =  '<='
      LESS                  =  '<'
      MUL_ASSIGN            =  '*='
      MUL                   =  '*'
      QUOTIENT_ASSIGN       =  '/='
      QUOTIENT              =  '/'
      REMAINDER_ASSIGN      =  '%='
      REMAINDER             =  '%'
      GREATER_OR_EQUAL      =  '>='
      GREATER               =  '>'
      DOT                   =  '.'
      APOS                  =  "'"
      QUOTE                 =  '"'
      BACK                  =  '\'
      TYPE_TAIL             =  '...'

      WHITE_SPACE           = 'regexp:\s+'
      LINE_COMMENT          = 'regexp://.*'
      BLOCK_COMMENT         = 'regexp:/\*([^*/]|\*(?!/)|/(?<!\*))*((?=\*/))(\*/)'
      NUMBER                = 'regexp:0x[0-9a-fA-F]+|\d+(\.\d*)?'
      TEXT                  = 'regexp:"([^"\\]|\\.)*"'
      ID                    = 'regexp:[_a-zA-Z][_a-zA-Z0-9]*'
  ]
}

alittleFile ::= NamespaceDec?

//修饰符////////////////////////////////////////////////////////////////////////////////////
// 注册修饰符，如果有这个修饰，那么就不会生成目标代码
RegisterModifier ::= register
// 访问修饰符，public表示全局可访问，private本文件，子类可访问，protected当前命名域内可访问
AccessModifier ::= public | private | protected
// 协程修饰符，用于修饰函数，async表示一个协程函数，await表示必须在协程函数里面调用
CoroutineModifier ::= async | await

// 协议修饰符
ProtocolModifier ::= Http | HttpDownload | HttpUpload | Msg

// 命令修饰符，用于开发人员指令执行函数
CommandBodyDec ::= '(' TEXT ')' {pin=1}
CommandModifier ::= Cmd CommandBodyDec? {pin=1}

// 是否可以为null，用于修饰函数形参
NullableModifier ::= Nullable

// 语言生效修饰符，用于修饰结构体，枚举，类，类成员变量，类成员函数，类静态函数，全局函数
// 表示修饰目标只有在规定的语言范围内生效
LanguageNameDec ::= ID

private LanguageBodyDecTail ::= ',' LanguageNameDec {pin=1}
LanguageBodyDec ::= '(' (LanguageNameDec LanguageBodyDecTail*)? ')' {pin=1}
LanguageModifier ::= Language LanguageBodyDec? {pin=1}

// 常量修饰符，用于修饰函数。表示这个函数不会对数据进行修改
ConstModifier ::= Const

// 原生修饰
NativeModifier ::= Native

// 属性修饰符汇总
AttributeModifier ::= '[' (NativeModifier | LanguageModifier | ConstModifier | NullableModifier | ProtocolModifier | CommandModifier)? ']' {pin=1}
// 所有修饰符汇总
Modifier ::= AttributeModifier | AccessModifier | CoroutineModifier | RegisterModifier


/////////////////////////////////////////////////////////////////////////////////////////////
// 命名域
NamespaceDec ::= Modifier* namespace NamespaceNameDec ';' NamespaceElementDec* {pin=2}
NamespaceElementDec ::= Modifier* (GlobalMethodDec | ClassDec | EnumDec | StructDec | UsingDec | InstanceDec | OpAssignExpr)
NamespaceNameDec ::= ID

// 模板定义
private TemplateDecTail ::= ',' TemplatePairDec {pin=1}
TemplateDec ::= '<' TemplatePairDec TemplateDecTail* '>' {pin=1}
TemplatePairDec ::= TemplateNameDec TemplateExtendsDec? {pin=1}
TemplateNameDec ::= ID
TemplateExtendsDec ::= ':' (AllType | TemplateExtendsClassDec | TemplateExtendsStructDec) {pin=1}
TemplateExtendsClassDec ::= class
TemplateExtendsStructDec ::= struct

// 类定义
ClassDec ::= class (ClassNameDec TemplateDec? ClassExtendsDec? ClassBodyDec?)? {pin=1}
ClassNameDec ::= ID
ClassExtendsDec ::= ':' (NamespaceNameDec '.')? ClassNameDec {pin=1}
ClassElementDec ::= Modifier* (ClassCtorDec | ClassGetterDec | ClassSetterDec | ClassStaticDec | ClassMethodDec | ClassVarDec)
ClassBodyDec ::= '{' ClassElementDec* '}' {pin=1}
ClassVarDec ::= AllType ClassVarNameDec ';' {pin=1}
ClassVarNameDec ::= ID

// 结构体定义
StructDec ::= struct (StructNameDec StructExtendsDec? StructBodyDec?)? {pin=1}
StructNameDec ::= ID
StructExtendsDec ::= ':' (NamespaceNameDec '.')? StructNameDec {pin=1}
StructBodyDec ::= '{' (StructOptionDec | StructVarDec)* '}' {pin=1}
StructVarDec ::= AllType StructVarNameDec ';' {pin=1}
StructVarNameDec ::= ID
StructOptionDec ::= option StructOptionNameDec '=' TEXT ';' {pin=1}
StructOptionNameDec ::= ID

// 枚举定义
EnumDec ::= enum (EnumNameDec EnumBodyDec?)? {pin=1}
EnumNameDec ::= ID
EnumBodyDec ::= '{' EnumVarDec* '}' {pin=1}
private EnumVarDecTail ::= '=' (NUMBER | TEXT) {pin=1}
EnumVarDec ::= EnumVarNameDec EnumVarDecTail? ';' {pin=1}
EnumVarNameDec ::= ID

// 全局变量
InstanceDec ::= VarAssignExpr

// using定义
UsingDec ::= using UsingNameDec '=' AllType ';' {pin=1}
UsingNameDec ::= ID

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// 函数参数部分
MethodParamTailDec ::= '...'
private MethodParamTypeDec ::= AllType MethodParamNameDec {pin=1}
MethodParamOneDec ::= MethodParamTailDec | Modifier* MethodParamTypeDec
MethodParamNameDec ::= ID
private MethodParamDecTail ::= ',' MethodParamOneDec
MethodParamDec ::= '(' (MethodParamOneDec MethodParamDecTail*)? ')' {pin=1}
MethodGetterParamDec ::= '(' ')' {pin=1}
MethodSetterParamDec ::= '(' MethodParamOneDec ')' {pin=1}

// 函数体部分
MethodBodyDec ::= '{' AllExpr* '}' {pin=1}
// 函数名部分
MethodNameDec ::= ID
// 函数返回值类型
MethodReturnTailDec ::= '...'
MethodReturnOneDec ::= MethodReturnTailDec | AllType
private MethodReturnDecTail ::= ',' MethodReturnOneDec {pin=1}
MethodReturnDec ::= ':' (MethodReturnOneDec MethodReturnDecTail*)? {pin=1}

// 类构造函数定义
ClassCtorDec ::= ctor (MethodParamDec MethodBodyDec?)? {pin=1}
// 类getter函数
ClassGetterDec ::= get (MethodNameDec (MethodGetterParamDec (':' (AllType MethodBodyDec?)?)?)?)? {pin=1}
// 类setter函数
ClassSetterDec ::= set (MethodNameDec (MethodSetterParamDec MethodBodyDec?)?)? {pin=1}
// 类成员函数定义
ClassMethodDec ::= fun (MethodNameDec (TemplateDec? MethodParamDec MethodReturnDec? MethodBodyDec?)?)? {pin=1}
// 类静态函数定义
ClassStaticDec ::= static (MethodNameDec (TemplateDec? MethodParamDec MethodReturnDec? MethodBodyDec?)?)? {pin=1}
// 全局函数
GlobalMethodDec ::= static (MethodNameDec (TemplateDec? MethodParamDec MethodReturnDec? MethodBodyDec?)?)? {pin=1}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// 表达式
AllExpr ::= Modifier* (IfExpr |
            ForExpr |
            WhileExpr |
            DoWhileExpr |
            ReturnExpr |
            FlowExpr |
            ThrowExpr |
            AssertExpr |
            WrapExpr |
            Op1Expr |
            EmptyExpr |
            VarAssignExpr |
            OpAssignExpr)

// 空语句
EmptyExpr ::= ';'

// for 流程控制
ForExpr ::= for ForCondition (ForBody | AllExpr) {pin=1}
ForCondition ::= '(' var ForPairDec (ForStepCondition | ForInCondition) ')' {pin=1}
ForBody ::= '{' AllExpr* '}' {pin=1}

ForStepCondition ::= ForStartStat ';' ForEndStat ';' ForStepStat {pin=2}
ForStartStat ::= '=' ValueStat {pin=1}
ForEndStat ::= ValueStat
ForStepStat ::= ValueStat

private ForInConditionTail ::= ',' ForPairDec {pin=1}
ForInCondition ::= ForInConditionTail* in ValueStat {pin=2}
private ForPairDecTail ::= ':' AllType {pin=1}
ForPairDec ::= VarAssignNameDec ForPairDecTail?

// while 流程控制
WhileExpr ::= while WhileCondition (WhileBody | AllExpr) {pin=1}
WhileCondition ::= '(' ValueStat? ')' {pin=1}
WhileBody ::= '{' AllExpr* '}' {pin=1}

// do while 流程控制
DoWhileExpr ::= do DoWhileBody while DoWhileCondition ';'{pin=1}
DoWhileCondition ::= '(' ValueStat? ')' {pin=1}
DoWhileBody ::= '{' AllExpr* '}' {pin=1}

// if else 流程控制
IfExpr ::= if IfCondition (IfBody | AllExpr) ElseIfExpr* ElseExpr? {pin=1}
IfCondition ::= '(' ValueStat? ')' {pin=1}
IfBody ::= '{' AllExpr* '}' {pin=1}
ElseExpr ::= else (ElseBody | AllExpr) {pin=1}
ElseBody ::= '{' AllExpr* '}' {pin=1}
ElseIfExpr ::= elseif ElseIfCondition (ElseIfBody | AllExpr) {pin=1}
ElseIfCondition ::= '(' ValueStat? ')' {pin=1}
ElseIfBody ::= '{' AllExpr* '}' {pin=1}

// 表达式包装 比如 { 表达式列表 }
WrapExpr ::= '{' AllExpr* '}' {pin=1}

// return
private ReturnExprTail ::= ',' ValueStat
ReturnExpr ::= return ((ValueStat ReturnExprTail*) | ReturnYield)? ';' {pin=1}
ReturnYield ::= yield

// break
FlowExpr ::= (break | continue) ';' {pin=1}

// 定义语句
private VarAssignExprTail1 ::= ',' VarAssignDec {pin=1}
private VarAssignExprTail2 ::= '=' ValueStat {pin=1}
VarAssignExpr ::= var VarAssignDec VarAssignExprTail1* VarAssignExprTail2? ';' {pin=1}
private VarAssignDecTail1 ::= ':' AllType {pin=1}
VarAssignDec ::= VarAssignNameDec VarAssignDecTail1?
VarAssignNameDec ::= ID

// 赋值
OpAssign ::= '=' | '+=' | '-=' | '*=' | '/=' | '%='
private OpAssignExprTail1 ::= ',' PropertyValue {pin=1}
private OpAssignExprTail2 ::= OpAssignExprTail1* OpAssign ValueStat {pin=2}
OpAssignExpr ::= PropertyValue OpAssignExprTail2? ';'

// 单目运算表达式
Op1Expr ::= Op1 ValueStat ';' {pin=1}

// throw
private ThrowExprTail ::= ',' ValueStat {pin=1}
ThrowExpr ::= throw '(' (ValueStat ThrowExprTail*)? ')' ';' {pin=1}

// assert
private AssertExprTail ::= ',' ValueStat {pin=1}
AssertExpr ::= assert '(' (ValueStat AssertExprTail*)? ')' ';' {pin=1}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 所有类型
AllType ::= AllTypeConst? (PrimitiveType | GenericType | CustomType)
AllTypeConst ::= const

// 自定义类型
CustomType ::= CustomTypeName CustomTypeDotId? CustomTypeTemplate?
CustomTypeName ::= ID
CustomTypeDotId ::= '.' CustomTypeDotIdName {pin=1}
CustomTypeDotIdName ::= ID
CustomTypeTemplate ::= '<' AllType (',' AllType)* '>' {pin=1}

// 通用类型
GenericType ::= GenericListType | GenericMapType | GenericFunctorType
private GenericMapTypeTail ::= ',' AllType {pin=1}
GenericMapType ::= Map '<' AllType GenericMapTypeTail '>' {pin=1}
GenericListType ::= List '<' AllType '>' {pin=1}
GenericFunctorType ::= Functor '<' AllTypeConst? CoroutineModifier? '(' GenericFunctorParamType? ')' GenericFunctorReturnType? '>' {pin=1}

GenericFunctorParamOneType ::= GenericFunctorParamTail | AllType
GenericFunctorParamTail ::= '...'
private GenericFunctorParamTypeTail ::= ',' GenericFunctorParamOneType {pin=1}
GenericFunctorParamType ::= GenericFunctorParamOneType GenericFunctorParamTypeTail*

GenericFunctorReturnTail ::= '...'
GenericFunctorReturnOneType ::= GenericFunctorReturnTail | AllType
private GenericFunctorReturnTypeTail ::= ',' GenericFunctorReturnOneType {pin=1}
GenericFunctorReturnType ::=  ':' GenericFunctorReturnOneType GenericFunctorReturnTypeTail* {pin=1}

// 基本类型
PrimitiveType ::= bool | double | int | long | any | string

//复合值///////////////////////////////////////////////////////////////////
ValueStat ::= OpNewStat | OpNewListStat | BindStat | TcallStat | Op2Stat | ValueOpStat
ValueFactorStat ::= WrapValueStat | ConstValue | ReflectValue | PropertyValue | MethodParamTailDec | CoroutineStat
ValueOpStat ::= ValueFactorStat (Op3Stat | Op4Stat | Op5Stat | Op6Stat | Op7Stat | Op8Stat)?

// new
private OpNewStatTail ::= ',' ValueStat {pin=1}
OpNewStat ::= new (CustomType | GenericType) '(' (ValueStat OpNewStatTail*)? ')' {pin=1}
// list 快捷表达式
private OpNewListStatTail ::= ',' ValueStat {pin=1}
OpNewListStat ::= '[' (ValueStat OpNewListStatTail*)? ']' {pin=1}
// bind
private BindStatTail ::= ',' ValueStat {pin=1}
BindStat ::= bind '(' (ValueStat BindStatTail*)? ')' {pin=1}
// tcall
private TcallStatTail ::= ',' ValueStat {pin=1}
TcallStat ::= tcall '(' (ValueStat TcallStatTail*)? ')' {pin=1}
// 值
WrapValueStat ::= '(' ValueStat ')' {pin=1}
// 常量值
ConstValue ::= true | false | null | TEXT | NUMBER

// 当前协程对象
CoroutineStat ::= co

// 反射机制
ReflectValue ::= reflect (ReflectCustomType | ReflectValueStat) {pin=1}
ReflectCustomType ::= '<' CustomType '>' {pin=1}
ReflectValueStat ::= '(' ValueStat ')' {pin=1}

// 属性
PropertyValue ::= PropertyValueFirstType PropertyValueSuffix*

PropertyValueFirstType ::= PropertyValueThisType | PropertyValueCastType | PropertyValueCustomType
PropertyValueCastType ::= cast '<' AllType '>' '(' ValueFactorStat ')' {pin=1}
PropertyValueCustomType ::= ID
PropertyValueThisType ::= this

PropertyValueSuffix ::= PropertyValueDotId | PropertyValueBracketValue | PropertyValueMethodCall
PropertyValueDotId ::= '.' PropertyValueDotIdName {pin=1}
PropertyValueDotIdName ::= ID
PropertyValueBracketValue ::= '[' ValueStat ']' {pin=1}
private PropertyValueMethodCallTail ::= ',' ValueStat {pin=1}
PropertyValueMethodCall ::= PropertyValueMethodTemplate? '(' (ValueStat PropertyValueMethodCallTail*)? ')' {pin=2}
private PropertyValueMethodTemplateTail ::= ',' AllType {pin=1}
PropertyValueMethodTemplate ::= '{' AllType PropertyValueMethodTemplateTail* '}' {pin=1}

// Op 类型的运算，编号越大，优先级越低///////////////////////////////////////////////////

// 双目运算
Op8 ::= '||'
Op8Stat ::= Op8Suffix Op8SuffixEx*
Op8Suffix ::= Op8 (ValueFactorStat | Op2Value) Op8SuffixEe* {pin=1}
Op8SuffixEe ::= Op3Suffix | Op4Suffix | Op5Suffix | Op6Suffix | Op7Suffix
Op8SuffixEx ::= Op8Suffix

Op7 ::= '&&'
Op7Stat ::= Op7Suffix Op7SuffixEx*
Op7Suffix ::= Op7 (ValueFactorStat | Op2Value) Op7SuffixEe* {pin=1}
Op7SuffixEe ::= Op3Suffix | Op4Suffix | Op5Suffix | Op6Suffix
Op7SuffixEx ::= Op7Suffix | Op8Suffix

Op6 ::=  '<=' | '<' | '>=' | '>' | '==' | '!='
Op6Stat ::= Op6Suffix Op6SuffixEx*
Op6Suffix ::= Op6 (ValueFactorStat | Op2Value) Op6SuffixEe* {pin=1}
Op6SuffixEe ::= Op3Suffix | Op4Suffix | Op5Suffix
Op6SuffixEx ::= Op6Suffix | Op7Suffix | Op8Suffix

Op5 ::= '..'
Op5Stat ::= Op5Suffix Op5SuffixEx*
Op5Suffix ::= Op5 (ValueFactorStat | Op2Value) Op5SuffixEe* {pin=1}
Op5SuffixEe ::= Op3Suffix | Op4Suffix
Op5SuffixEx ::= Op5Suffix | Op6Suffix | Op7Suffix | Op8Suffix

Op4 ::= '+' | '-'
Op4Stat ::= Op4Suffix Op4SuffixEx*
Op4Suffix ::= Op4 (ValueFactorStat | Op2Value) Op4SuffixEe* {pin=1}
Op4SuffixEe ::= Op3Suffix
Op4SuffixEx ::= Op4Suffix | Op5Suffix | Op6Suffix | Op7Suffix | Op8Suffix

Op3 ::= '*' | '/' | '%'
Op3Stat ::= Op3Suffix Op3SuffixEx*
Op3Suffix ::= Op3 (ValueFactorStat | Op2Value) {pin=1}
Op3SuffixEx ::= Op3Suffix | Op4Suffix | Op5Suffix | Op6Suffix | Op7Suffix | Op8Suffix

// 单目运算
Op2 ::= '!' | '-'
Op2Stat ::= Op2Value Op2SuffixEx*
Op2Value ::= Op2 ValueFactorStat {pin=1}
Op2SuffixEx ::= Op3Suffix | Op4Suffix | Op5Suffix | Op6Suffix | Op7Suffix | Op8Suffix

// 优先级1 前缀自加，前缀自减 从右到左
Op1 ::= '++' | '--'
